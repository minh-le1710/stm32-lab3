
stm32-lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b48  08002b48  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002b48  08002b48  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b48  08002b48  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b4c  08002b4c  00012b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000058  08002ba8  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002ba8  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ecd  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf2  00000000  00000000  00029f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002bb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d03  00000000  00000000  0002cfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc1d  00000000  00000000  00043cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008270a  00000000  00000000  0004f8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1fd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a40  00000000  00000000  000d2028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b00 	.word	0x08002b00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002b00 	.word	0x08002b00

0800014c <isButtonPressed>:

int TimeOutForKeyPress = 500;
int button_flag[BUTTONS_NUMBER] = {0,0,0};


int isButtonPressed(int i){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[i] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[i] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0

}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000074 	.word	0x20000074

08000180 <subKeyProcess>:

void subKeyProcess(int i){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000074 	.word	0x20000074

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
for(int i=0; i<BUTTONS_NUMBER; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e063      	b.n	8000274 <getKeyInput+0xd4>
  KeyReg2[i] = KeyReg1[i];
 80001ac:	4a35      	ldr	r2, [pc, #212]	; (8000284 <getKeyInput+0xe4>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4934      	ldr	r1, [pc, #208]	; (8000288 <getKeyInput+0xe8>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  KeyReg1[i] = KeyReg0[i];
 80001bc:	4a33      	ldr	r2, [pc, #204]	; (800028c <getKeyInput+0xec>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	492f      	ldr	r1, [pc, #188]	; (8000284 <getKeyInput+0xe4>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, buttonsArr[i]);
 80001cc:	4a30      	ldr	r2, [pc, #192]	; (8000290 <getKeyInput+0xf0>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	482e      	ldr	r0, [pc, #184]	; (8000294 <getKeyInput+0xf4>)
 80001da:	f001 fc65 	bl	8001aa8 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a2a      	ldr	r2, [pc, #168]	; (800028c <getKeyInput+0xec>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001ea:	4a26      	ldr	r2, [pc, #152]	; (8000284 <getKeyInput+0xe4>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	4926      	ldr	r1, [pc, #152]	; (800028c <getKeyInput+0xec>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d137      	bne.n	800026e <getKeyInput+0xce>
 80001fe:	4a21      	ldr	r2, [pc, #132]	; (8000284 <getKeyInput+0xe4>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4920      	ldr	r1, [pc, #128]	; (8000288 <getKeyInput+0xe8>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d12d      	bne.n	800026e <getKeyInput+0xce>
    if (KeyReg2[i] != KeyReg3[i]){
 8000212:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <getKeyInput+0xe8>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	491f      	ldr	r1, [pc, #124]	; (8000298 <getKeyInput+0xf8>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d015      	beq.n	8000252 <getKeyInput+0xb2>
      KeyReg3[i] = KeyReg2[i];
 8000226:	4a18      	ldr	r2, [pc, #96]	; (8000288 <getKeyInput+0xe8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	491a      	ldr	r1, [pc, #104]	; (8000298 <getKeyInput+0xf8>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (KeyReg3[i] == PRESSED_STATE){
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <getKeyInput+0xf8>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d115      	bne.n	800026e <getKeyInput+0xce>
        TimeOutForKeyPress = 500;
 8000242:	4b16      	ldr	r3, [pc, #88]	; (800029c <getKeyInput+0xfc>)
 8000244:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000248:	601a      	str	r2, [r3, #0]
        subKeyProcess(i);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ff98 	bl	8000180 <subKeyProcess>
 8000250:	e00d      	b.n	800026e <getKeyInput+0xce>
      }
    }else{
       TimeOutForKeyPress --;
 8000252:	4b12      	ldr	r3, [pc, #72]	; (800029c <getKeyInput+0xfc>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3b01      	subs	r3, #1
 8000258:	4a10      	ldr	r2, [pc, #64]	; (800029c <getKeyInput+0xfc>)
 800025a:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <getKeyInput+0xfc>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d104      	bne.n	800026e <getKeyInput+0xce>
          KeyReg3[i] = NORMAL_STATE;
 8000264:	4a0c      	ldr	r2, [pc, #48]	; (8000298 <getKeyInput+0xf8>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2101      	movs	r1, #1
 800026a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
for(int i=0; i<BUTTONS_NUMBER; i++){
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	3301      	adds	r3, #1
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b02      	cmp	r3, #2
 8000278:	dd98      	ble.n	80001ac <getKeyInput+0xc>
        }
    }
  }
}
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000018 	.word	0x20000018
 8000288:	20000024 	.word	0x20000024
 800028c:	2000000c 	.word	0x2000000c
 8000290:	20000000 	.word	0x20000000
 8000294:	40010800 	.word	0x40010800
 8000298:	20000030 	.word	0x20000030
 800029c:	2000003c 	.word	0x2000003c

080002a0 <displayFirstLedCouple>:
 *      Author: ASUS
 */
#include "display_led.h"


void displayFirstLedCouple(enum LedState state_1){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
	switch(state_1){
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	2b03      	cmp	r3, #3
 80002ae:	d84b      	bhi.n	8000348 <displayFirstLedCouple+0xa8>
 80002b0:	a201      	add	r2, pc, #4	; (adr r2, 80002b8 <displayFirstLedCouple+0x18>)
 80002b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b6:	bf00      	nop
 80002b8:	080002c9 	.word	0x080002c9
 80002bc:	080002e9 	.word	0x080002e9
 80002c0:	08000329 	.word	0x08000329
 80002c4:	08000309 	.word	0x08000309
	 case LED_INIT:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , RESET) ;
 80002c8:	2200      	movs	r2, #0
 80002ca:	2108      	movs	r1, #8
 80002cc:	4821      	ldr	r0, [pc, #132]	; (8000354 <displayFirstLedCouple+0xb4>)
 80002ce:	f001 fc02 	bl	8001ad6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , RESET ) ;
 80002d2:	2200      	movs	r2, #0
 80002d4:	2104      	movs	r1, #4
 80002d6:	481f      	ldr	r0, [pc, #124]	; (8000354 <displayFirstLedCouple+0xb4>)
 80002d8:	f001 fbfd 	bl	8001ad6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , RESET ) ;
 80002dc:	2200      	movs	r2, #0
 80002de:	2102      	movs	r1, #2
 80002e0:	481c      	ldr	r0, [pc, #112]	; (8000354 <displayFirstLedCouple+0xb4>)
 80002e2:	f001 fbf8 	bl	8001ad6 <HAL_GPIO_WritePin>
			 break;
 80002e6:	e030      	b.n	800034a <displayFirstLedCouple+0xaa>
	 case RED:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , RESET) ;
 80002e8:	2200      	movs	r2, #0
 80002ea:	2108      	movs	r1, #8
 80002ec:	4819      	ldr	r0, [pc, #100]	; (8000354 <displayFirstLedCouple+0xb4>)
 80002ee:	f001 fbf2 	bl	8001ad6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , RESET ) ;
 80002f2:	2200      	movs	r2, #0
 80002f4:	2104      	movs	r1, #4
 80002f6:	4817      	ldr	r0, [pc, #92]	; (8000354 <displayFirstLedCouple+0xb4>)
 80002f8:	f001 fbed 	bl	8001ad6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , SET ) ;
 80002fc:	2201      	movs	r2, #1
 80002fe:	2102      	movs	r1, #2
 8000300:	4814      	ldr	r0, [pc, #80]	; (8000354 <displayFirstLedCouple+0xb4>)
 8000302:	f001 fbe8 	bl	8001ad6 <HAL_GPIO_WritePin>
			 break;
 8000306:	e020      	b.n	800034a <displayFirstLedCouple+0xaa>
	 case YELLOW:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , RESET) ;
 8000308:	2200      	movs	r2, #0
 800030a:	2108      	movs	r1, #8
 800030c:	4811      	ldr	r0, [pc, #68]	; (8000354 <displayFirstLedCouple+0xb4>)
 800030e:	f001 fbe2 	bl	8001ad6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , SET ) ;
 8000312:	2201      	movs	r2, #1
 8000314:	2104      	movs	r1, #4
 8000316:	480f      	ldr	r0, [pc, #60]	; (8000354 <displayFirstLedCouple+0xb4>)
 8000318:	f001 fbdd 	bl	8001ad6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , RESET ) ;
 800031c:	2200      	movs	r2, #0
 800031e:	2102      	movs	r1, #2
 8000320:	480c      	ldr	r0, [pc, #48]	; (8000354 <displayFirstLedCouple+0xb4>)
 8000322:	f001 fbd8 	bl	8001ad6 <HAL_GPIO_WritePin>
			 break;
 8000326:	e010      	b.n	800034a <displayFirstLedCouple+0xaa>
	 case GREEN:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , SET) ;
 8000328:	2201      	movs	r2, #1
 800032a:	2108      	movs	r1, #8
 800032c:	4809      	ldr	r0, [pc, #36]	; (8000354 <displayFirstLedCouple+0xb4>)
 800032e:	f001 fbd2 	bl	8001ad6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , RESET ) ;
 8000332:	2200      	movs	r2, #0
 8000334:	2104      	movs	r1, #4
 8000336:	4807      	ldr	r0, [pc, #28]	; (8000354 <displayFirstLedCouple+0xb4>)
 8000338:	f001 fbcd 	bl	8001ad6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , RESET ) ;
 800033c:	2200      	movs	r2, #0
 800033e:	2102      	movs	r1, #2
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <displayFirstLedCouple+0xb4>)
 8000342:	f001 fbc8 	bl	8001ad6 <HAL_GPIO_WritePin>
			 break;
 8000346:	e000      	b.n	800034a <displayFirstLedCouple+0xaa>
	 default:
		 break;
 8000348:	bf00      	nop
	}
}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40010800 	.word	0x40010800

08000358 <displaySecondLedCouple>:



void displaySecondLedCouple(enum LedState state_2){
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
	switch(state_2){
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	2b03      	cmp	r3, #3
 8000366:	d84b      	bhi.n	8000400 <displaySecondLedCouple+0xa8>
 8000368:	a201      	add	r2, pc, #4	; (adr r2, 8000370 <displaySecondLedCouple+0x18>)
 800036a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036e:	bf00      	nop
 8000370:	08000381 	.word	0x08000381
 8000374:	080003a1 	.word	0x080003a1
 8000378:	080003e1 	.word	0x080003e1
 800037c:	080003c1 	.word	0x080003c1
	 	 case LED_INIT:
			 HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , RESET) ;
 8000380:	2200      	movs	r2, #0
 8000382:	2140      	movs	r1, #64	; 0x40
 8000384:	4821      	ldr	r0, [pc, #132]	; (800040c <displaySecondLedCouple+0xb4>)
 8000386:	f001 fba6 	bl	8001ad6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , RESET ) ;
 800038a:	2200      	movs	r2, #0
 800038c:	2120      	movs	r1, #32
 800038e:	481f      	ldr	r0, [pc, #124]	; (800040c <displaySecondLedCouple+0xb4>)
 8000390:	f001 fba1 	bl	8001ad6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , RESET ) ;
 8000394:	2200      	movs	r2, #0
 8000396:	2110      	movs	r1, #16
 8000398:	481c      	ldr	r0, [pc, #112]	; (800040c <displaySecondLedCouple+0xb4>)
 800039a:	f001 fb9c 	bl	8001ad6 <HAL_GPIO_WritePin>
			 break;
 800039e:	e030      	b.n	8000402 <displaySecondLedCouple+0xaa>
		case RED:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , RESET) ;
 80003a0:	2200      	movs	r2, #0
 80003a2:	2140      	movs	r1, #64	; 0x40
 80003a4:	4819      	ldr	r0, [pc, #100]	; (800040c <displaySecondLedCouple+0xb4>)
 80003a6:	f001 fb96 	bl	8001ad6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , RESET ) ;
 80003aa:	2200      	movs	r2, #0
 80003ac:	2120      	movs	r1, #32
 80003ae:	4817      	ldr	r0, [pc, #92]	; (800040c <displaySecondLedCouple+0xb4>)
 80003b0:	f001 fb91 	bl	8001ad6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , SET ) ;
 80003b4:	2201      	movs	r2, #1
 80003b6:	2110      	movs	r1, #16
 80003b8:	4814      	ldr	r0, [pc, #80]	; (800040c <displaySecondLedCouple+0xb4>)
 80003ba:	f001 fb8c 	bl	8001ad6 <HAL_GPIO_WritePin>
			break;
 80003be:	e020      	b.n	8000402 <displaySecondLedCouple+0xaa>
		case YELLOW:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , RESET) ;
 80003c0:	2200      	movs	r2, #0
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	4811      	ldr	r0, [pc, #68]	; (800040c <displaySecondLedCouple+0xb4>)
 80003c6:	f001 fb86 	bl	8001ad6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , SET ) ;
 80003ca:	2201      	movs	r2, #1
 80003cc:	2120      	movs	r1, #32
 80003ce:	480f      	ldr	r0, [pc, #60]	; (800040c <displaySecondLedCouple+0xb4>)
 80003d0:	f001 fb81 	bl	8001ad6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , RESET ) ;
 80003d4:	2200      	movs	r2, #0
 80003d6:	2110      	movs	r1, #16
 80003d8:	480c      	ldr	r0, [pc, #48]	; (800040c <displaySecondLedCouple+0xb4>)
 80003da:	f001 fb7c 	bl	8001ad6 <HAL_GPIO_WritePin>
			break;
 80003de:	e010      	b.n	8000402 <displaySecondLedCouple+0xaa>
		case GREEN:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , SET) ;
 80003e0:	2201      	movs	r2, #1
 80003e2:	2140      	movs	r1, #64	; 0x40
 80003e4:	4809      	ldr	r0, [pc, #36]	; (800040c <displaySecondLedCouple+0xb4>)
 80003e6:	f001 fb76 	bl	8001ad6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , RESET ) ;
 80003ea:	2200      	movs	r2, #0
 80003ec:	2120      	movs	r1, #32
 80003ee:	4807      	ldr	r0, [pc, #28]	; (800040c <displaySecondLedCouple+0xb4>)
 80003f0:	f001 fb71 	bl	8001ad6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , RESET ) ;
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	4804      	ldr	r0, [pc, #16]	; (800040c <displaySecondLedCouple+0xb4>)
 80003fa:	f001 fb6c 	bl	8001ad6 <HAL_GPIO_WritePin>
			break;
 80003fe:	e000      	b.n	8000402 <displaySecondLedCouple+0xaa>
		default:
		  break;
 8000400:	bf00      	nop
   }
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40010800 	.word	0x40010800

08000410 <toggleLeds>:

void toggleLeds(enum LedState state){
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
	switch(state){
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	2b03      	cmp	r3, #3
 800041e:	d00e      	beq.n	800043e <toggleLeds+0x2e>
 8000420:	2b03      	cmp	r3, #3
 8000422:	dc1e      	bgt.n	8000462 <toggleLeds+0x52>
 8000424:	2b01      	cmp	r3, #1
 8000426:	d013      	beq.n	8000450 <toggleLeds+0x40>
 8000428:	2b02      	cmp	r3, #2
 800042a:	d11a      	bne.n	8000462 <toggleLeds+0x52>
	 case GREEN:
			 HAL_GPIO_TogglePin( GREEN1_GPIO_Port , GREEN1_Pin) ;
 800042c:	2108      	movs	r1, #8
 800042e:	480f      	ldr	r0, [pc, #60]	; (800046c <toggleLeds+0x5c>)
 8000430:	f001 fb69 	bl	8001b06 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( GREEN2_GPIO_Port , GREEN2_Pin) ;
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	480d      	ldr	r0, [pc, #52]	; (800046c <toggleLeds+0x5c>)
 8000438:	f001 fb65 	bl	8001b06 <HAL_GPIO_TogglePin>
			 break;
 800043c:	e012      	b.n	8000464 <toggleLeds+0x54>
	 case YELLOW:
			 HAL_GPIO_TogglePin( YELLOW1_GPIO_Port , YELLOW1_Pin) ;
 800043e:	2104      	movs	r1, #4
 8000440:	480a      	ldr	r0, [pc, #40]	; (800046c <toggleLeds+0x5c>)
 8000442:	f001 fb60 	bl	8001b06 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( YELLOW2_GPIO_Port , YELLOW2_Pin) ;
 8000446:	2120      	movs	r1, #32
 8000448:	4808      	ldr	r0, [pc, #32]	; (800046c <toggleLeds+0x5c>)
 800044a:	f001 fb5c 	bl	8001b06 <HAL_GPIO_TogglePin>
			 break;
 800044e:	e009      	b.n	8000464 <toggleLeds+0x54>
	 case RED:
			 HAL_GPIO_TogglePin( RED1_GPIO_Port , RED1_Pin) ;
 8000450:	2102      	movs	r1, #2
 8000452:	4806      	ldr	r0, [pc, #24]	; (800046c <toggleLeds+0x5c>)
 8000454:	f001 fb57 	bl	8001b06 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( RED2_GPIO_Port , RED2_Pin) ;
 8000458:	2110      	movs	r1, #16
 800045a:	4804      	ldr	r0, [pc, #16]	; (800046c <toggleLeds+0x5c>)
 800045c:	f001 fb53 	bl	8001b06 <HAL_GPIO_TogglePin>
			 break;
 8000460:	e000      	b.n	8000464 <toggleLeds+0x54>
	 default:
		 break;
 8000462:	bf00      	nop
	}
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010800 	.word	0x40010800

08000470 <displaySEG7_1>:


void displaySEG7_1(int num) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
    char led7seg[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
 8000478:	4a14      	ldr	r2, [pc, #80]	; (80004cc <displaySEG7_1+0x5c>)
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000480:	c303      	stmia	r3!, {r0, r1}
 8000482:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < 7; i++) {
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
 8000488:	e018      	b.n	80004bc <displaySEG7_1+0x4c>
        HAL_GPIO_WritePin(GPIOB, A1_Pin << i, (led7seg[num] >> i) & 1);
 800048a:	2201      	movs	r2, #1
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	fa02 f303 	lsl.w	r3, r2, r3
 8000492:	b299      	uxth	r1, r3
 8000494:	f107 0208 	add.w	r2, r7, #8
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4413      	add	r3, r2
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	461a      	mov	r2, r3
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	fa42 f303 	asr.w	r3, r2, r3
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	461a      	mov	r2, r3
 80004b0:	4807      	ldr	r0, [pc, #28]	; (80004d0 <displaySEG7_1+0x60>)
 80004b2:	f001 fb10 	bl	8001ad6 <HAL_GPIO_WritePin>
    for (int i = 0; i < 7; i++) {
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	3301      	adds	r3, #1
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	2b06      	cmp	r3, #6
 80004c0:	dde3      	ble.n	800048a <displaySEG7_1+0x1a>
    }
}
 80004c2:	bf00      	nop
 80004c4:	bf00      	nop
 80004c6:	3718      	adds	r7, #24
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	08002b18 	.word	0x08002b18
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <displaySEG7_2>:
void displaySEG7_2(int num) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
    char led7seg[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
 80004dc:	4a14      	ldr	r2, [pc, #80]	; (8000530 <displaySEG7_2+0x5c>)
 80004de:	f107 0308 	add.w	r3, r7, #8
 80004e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80004e4:	c303      	stmia	r3!, {r0, r1}
 80004e6:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < 7; i++) {
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	e018      	b.n	8000520 <displaySEG7_2+0x4c>
        HAL_GPIO_WritePin(GPIOB, A2_Pin << i, (led7seg[num] >> i) & 1);
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	fa02 f303 	lsl.w	r3, r2, r3
 80004f6:	b299      	uxth	r1, r3
 80004f8:	f107 0208 	add.w	r2, r7, #8
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4413      	add	r3, r2
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	461a      	mov	r2, r3
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	fa42 f303 	asr.w	r3, r2, r3
 800050a:	b2db      	uxtb	r3, r3
 800050c:	f003 0301 	and.w	r3, r3, #1
 8000510:	b2db      	uxtb	r3, r3
 8000512:	461a      	mov	r2, r3
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <displaySEG7_2+0x60>)
 8000516:	f001 fade 	bl	8001ad6 <HAL_GPIO_WritePin>
    for (int i = 0; i < 7; i++) {
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3301      	adds	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	2b06      	cmp	r3, #6
 8000524:	dde3      	ble.n	80004ee <displaySEG7_2+0x1a>
    }
}
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	08002b18 	.word	0x08002b18
 8000534:	40010c00 	.word	0x40010c00

08000538 <enable0>:
void enable0(){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	4805      	ldr	r0, [pc, #20]	; (8000558 <enable0+0x20>)
 8000542:	f001 fac8 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054c:	4802      	ldr	r0, [pc, #8]	; (8000558 <enable0+0x20>)
 800054e:	f001 fac2 	bl	8001ad6 <HAL_GPIO_WritePin>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40010800 	.word	0x40010800

0800055c <enable1>:

void enable1(){
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2180      	movs	r1, #128	; 0x80
 8000564:	4805      	ldr	r0, [pc, #20]	; (800057c <enable1+0x20>)
 8000566:	f001 fab6 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <enable1+0x20>)
 8000572:	f001 fab0 	bl	8001ad6 <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40010800 	.word	0x40010800

08000580 <enable2>:

void enable2(){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <enable2+0x20>)
 800058c:	f001 faa3 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000596:	4802      	ldr	r0, [pc, #8]	; (80005a0 <enable2+0x20>)
 8000598:	f001 fa9d 	bl	8001ad6 <HAL_GPIO_WritePin>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40010800 	.word	0x40010800

080005a4 <enable3>:

void enable3(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <enable3+0x20>)
 80005b0:	f001 fa91 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ba:	4802      	ldr	r0, [pc, #8]	; (80005c4 <enable3+0x20>)
 80005bc:	f001 fa8b 	bl	8001ad6 <HAL_GPIO_WritePin>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40010800 	.word	0x40010800

080005c8 <enable4>:
void enable4(){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <enable4+0x20>)
 80005d4:	f001 fa7f 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005de:	4802      	ldr	r0, [pc, #8]	; (80005e8 <enable4+0x20>)
 80005e0:	f001 fa79 	bl	8001ad6 <HAL_GPIO_WritePin>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40010800 	.word	0x40010800

080005ec <enable5>:

void enable5(){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <enable5+0x20>)
 80005f8:	f001 fa6d 	bl	8001ad6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000602:	4802      	ldr	r0, [pc, #8]	; (800060c <enable5+0x20>)
 8000604:	f001 fa67 	bl	8001ad6 <HAL_GPIO_WritePin>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40010800 	.word	0x40010800

08000610 <showTimeDelay_First>:
void showTimeDelay_First(int first, int second){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
	first--;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3b01      	subs	r3, #1
 800061e:	607b      	str	r3, [r7, #4]
	second--;
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	3b01      	subs	r3, #1
 8000624:	603b      	str	r3, [r7, #0]
	enable0();
 8000626:	f7ff ff87 	bl	8000538 <enable0>
	displaySEG7_1(first/10);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a0c      	ldr	r2, [pc, #48]	; (8000660 <showTimeDelay_First+0x50>)
 800062e:	fb82 1203 	smull	r1, r2, r2, r3
 8000632:	1092      	asrs	r2, r2, #2
 8000634:	17db      	asrs	r3, r3, #31
 8000636:	1ad3      	subs	r3, r2, r3
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff19 	bl	8000470 <displaySEG7_1>
	enable2();
 800063e:	f7ff ff9f 	bl	8000580 <enable2>
	displaySEG7_2(second/10);
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <showTimeDelay_First+0x50>)
 8000646:	fb82 1203 	smull	r1, r2, r2, r3
 800064a:	1092      	asrs	r2, r2, #2
 800064c:	17db      	asrs	r3, r3, #31
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff3f 	bl	80004d4 <displaySEG7_2>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	66666667 	.word	0x66666667

08000664 <showTimeDelay_Second>:

void showTimeDelay_Second(int first, int second){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
	first--;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3b01      	subs	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
	second--;
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	3b01      	subs	r3, #1
 8000678:	603b      	str	r3, [r7, #0]
	enable1();
 800067a:	f7ff ff6f 	bl	800055c <enable1>
	displaySEG7_1(first%10);
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <showTimeDelay_Second+0x64>)
 8000682:	fb83 1302 	smull	r1, r3, r3, r2
 8000686:	1099      	asrs	r1, r3, #2
 8000688:	17d3      	asrs	r3, r2, #31
 800068a:	1ac9      	subs	r1, r1, r3
 800068c:	460b      	mov	r3, r1
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	440b      	add	r3, r1
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	1ad1      	subs	r1, r2, r3
 8000696:	4608      	mov	r0, r1
 8000698:	f7ff feea 	bl	8000470 <displaySEG7_1>
	enable3();
 800069c:	f7ff ff82 	bl	80005a4 <enable3>
	displaySEG7_2(second%10);
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <showTimeDelay_Second+0x64>)
 80006a4:	fb83 1302 	smull	r1, r3, r3, r2
 80006a8:	1099      	asrs	r1, r3, #2
 80006aa:	17d3      	asrs	r3, r2, #31
 80006ac:	1ac9      	subs	r1, r1, r3
 80006ae:	460b      	mov	r3, r1
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	440b      	add	r3, r1
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	1ad1      	subs	r1, r2, r3
 80006b8:	4608      	mov	r0, r1
 80006ba:	f7ff ff0b 	bl	80004d4 <displaySEG7_2>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	66666667 	.word	0x66666667

080006cc <showTimeDelay1>:
void showTimeDelay1(int delaytime){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	delaytime--;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
	enable4();
 80006da:	f7ff ff75 	bl	80005c8 <enable4>
	displaySEG7_1(delaytime/10);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a06      	ldr	r2, [pc, #24]	; (80006fc <showTimeDelay1+0x30>)
 80006e2:	fb82 1203 	smull	r1, r2, r2, r3
 80006e6:	1092      	asrs	r2, r2, #2
 80006e8:	17db      	asrs	r3, r3, #31
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff febf 	bl	8000470 <displaySEG7_1>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	66666667 	.word	0x66666667

08000700 <showTimeDelay2>:
void showTimeDelay2(int delaytime){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	delaytime--;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3b01      	subs	r3, #1
 800070c:	607b      	str	r3, [r7, #4]
	enable5();
 800070e:	f7ff ff6d 	bl	80005ec <enable5>
	displaySEG7_2(delaytime%10);
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <showTimeDelay2+0x38>)
 8000716:	fb83 1302 	smull	r1, r3, r3, r2
 800071a:	1099      	asrs	r1, r3, #2
 800071c:	17d3      	asrs	r3, r2, #31
 800071e:	1ac9      	subs	r1, r1, r3
 8000720:	460b      	mov	r3, r1
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	440b      	add	r3, r1
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	1ad1      	subs	r1, r2, r3
 800072a:	4608      	mov	r0, r1
 800072c:	f7ff fed2 	bl	80004d4 <displaySEG7_2>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	66666667 	.word	0x66666667

0800073c <auto_run>:
 *  Created on: Oct 25, 2024
 *      Author: ASUS
 */
#include "fsm_auto.h"

void auto_run() {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    if (isButtonPressed(0) == 1) {
 8000740:	2000      	movs	r0, #0
 8000742:	f7ff fd03 	bl	800014c <isButtonPressed>
 8000746:	4603      	mov	r3, r0
 8000748:	2b01      	cmp	r3, #1
 800074a:	d108      	bne.n	800075e <auto_run+0x22>
        HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin | EN4_Pin | EN5_Pin, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8000752:	4894      	ldr	r0, [pc, #592]	; (80009a4 <auto_run+0x268>)
 8000754:	f001 f9bf 	bl	8001ad6 <HAL_GPIO_WritePin>
        MODE = MODE2;
 8000758:	4b93      	ldr	r3, [pc, #588]	; (80009a8 <auto_run+0x26c>)
 800075a:	2202      	movs	r2, #2
 800075c:	701a      	strb	r2, [r3, #0]
    }

    if (MODE == MODE1) {
 800075e:	4b92      	ldr	r3, [pc, #584]	; (80009a8 <auto_run+0x26c>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b01      	cmp	r3, #1
 8000764:	f040 8115 	bne.w	8000992 <auto_run+0x256>
        switch (firstCoupleLedAutoState) {
 8000768:	4b90      	ldr	r3, [pc, #576]	; (80009ac <auto_run+0x270>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b03      	cmp	r3, #3
 800076e:	d863      	bhi.n	8000838 <auto_run+0xfc>
 8000770:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <auto_run+0x3c>)
 8000772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000776:	bf00      	nop
 8000778:	08000789 	.word	0x08000789
 800077c:	08000797 	.word	0x08000797
 8000780:	080007cd 	.word	0x080007cd
 8000784:	08000803 	.word	0x08000803
            case LED_INIT:
                firstCoupleLedAutoState = RED;
 8000788:	4b88      	ldr	r3, [pc, #544]	; (80009ac <auto_run+0x270>)
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
                setTimer1(100);
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f000 fcf6 	bl	8001180 <setTimer1>
                break;
 8000794:	e057      	b.n	8000846 <auto_run+0x10a>
            case RED:
                displayFirstLedCouple(RED);
 8000796:	2001      	movs	r0, #1
 8000798:	f7ff fd82 	bl	80002a0 <displayFirstLedCouple>
                if (timer1_flag == 1) {
 800079c:	4b84      	ldr	r3, [pc, #528]	; (80009b0 <auto_run+0x274>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d14b      	bne.n	800083c <auto_run+0x100>
                    countdownFirstCoupleLed--;
 80007a4:	4b83      	ldr	r3, [pc, #524]	; (80009b4 <auto_run+0x278>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a82      	ldr	r2, [pc, #520]	; (80009b4 <auto_run+0x278>)
 80007ac:	6013      	str	r3, [r2, #0]
                    if (countdownFirstCoupleLed == 0) {
 80007ae:	4b81      	ldr	r3, [pc, #516]	; (80009b4 <auto_run+0x278>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d106      	bne.n	80007c4 <auto_run+0x88>
                        countdownFirstCoupleLed = greenDelay;
 80007b6:	4b80      	ldr	r3, [pc, #512]	; (80009b8 <auto_run+0x27c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a7e      	ldr	r2, [pc, #504]	; (80009b4 <auto_run+0x278>)
 80007bc:	6013      	str	r3, [r2, #0]
                        firstCoupleLedAutoState = GREEN;
 80007be:	4b7b      	ldr	r3, [pc, #492]	; (80009ac <auto_run+0x270>)
 80007c0:	2202      	movs	r2, #2
 80007c2:	701a      	strb	r2, [r3, #0]
                    }
                    setTimer1(100);
 80007c4:	2064      	movs	r0, #100	; 0x64
 80007c6:	f000 fcdb 	bl	8001180 <setTimer1>
                }
                break;
 80007ca:	e037      	b.n	800083c <auto_run+0x100>
            case GREEN:
                displayFirstLedCouple(GREEN);
 80007cc:	2002      	movs	r0, #2
 80007ce:	f7ff fd67 	bl	80002a0 <displayFirstLedCouple>
                if (timer1_flag == 1) {
 80007d2:	4b77      	ldr	r3, [pc, #476]	; (80009b0 <auto_run+0x274>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d132      	bne.n	8000840 <auto_run+0x104>
                    countdownFirstCoupleLed--;
 80007da:	4b76      	ldr	r3, [pc, #472]	; (80009b4 <auto_run+0x278>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3b01      	subs	r3, #1
 80007e0:	4a74      	ldr	r2, [pc, #464]	; (80009b4 <auto_run+0x278>)
 80007e2:	6013      	str	r3, [r2, #0]
                    if (countdownFirstCoupleLed == 0) {
 80007e4:	4b73      	ldr	r3, [pc, #460]	; (80009b4 <auto_run+0x278>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d106      	bne.n	80007fa <auto_run+0xbe>
                        countdownFirstCoupleLed = yellowDelay;
 80007ec:	4b73      	ldr	r3, [pc, #460]	; (80009bc <auto_run+0x280>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a70      	ldr	r2, [pc, #448]	; (80009b4 <auto_run+0x278>)
 80007f2:	6013      	str	r3, [r2, #0]
                        firstCoupleLedAutoState = YELLOW;
 80007f4:	4b6d      	ldr	r3, [pc, #436]	; (80009ac <auto_run+0x270>)
 80007f6:	2203      	movs	r2, #3
 80007f8:	701a      	strb	r2, [r3, #0]
                    }
                    setTimer1(100);
 80007fa:	2064      	movs	r0, #100	; 0x64
 80007fc:	f000 fcc0 	bl	8001180 <setTimer1>
                }
                break;
 8000800:	e01e      	b.n	8000840 <auto_run+0x104>
            case YELLOW:
                displayFirstLedCouple(YELLOW);
 8000802:	2003      	movs	r0, #3
 8000804:	f7ff fd4c 	bl	80002a0 <displayFirstLedCouple>
                if (timer1_flag == 1) {
 8000808:	4b69      	ldr	r3, [pc, #420]	; (80009b0 <auto_run+0x274>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d119      	bne.n	8000844 <auto_run+0x108>
                    countdownFirstCoupleLed--;
 8000810:	4b68      	ldr	r3, [pc, #416]	; (80009b4 <auto_run+0x278>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	3b01      	subs	r3, #1
 8000816:	4a67      	ldr	r2, [pc, #412]	; (80009b4 <auto_run+0x278>)
 8000818:	6013      	str	r3, [r2, #0]
                    if (countdownFirstCoupleLed == 0) {
 800081a:	4b66      	ldr	r3, [pc, #408]	; (80009b4 <auto_run+0x278>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d106      	bne.n	8000830 <auto_run+0xf4>
                        countdownFirstCoupleLed = redDelay;
 8000822:	4b67      	ldr	r3, [pc, #412]	; (80009c0 <auto_run+0x284>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a63      	ldr	r2, [pc, #396]	; (80009b4 <auto_run+0x278>)
 8000828:	6013      	str	r3, [r2, #0]
                        firstCoupleLedAutoState = RED;
 800082a:	4b60      	ldr	r3, [pc, #384]	; (80009ac <auto_run+0x270>)
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
                    }
                    setTimer1(100);
 8000830:	2064      	movs	r0, #100	; 0x64
 8000832:	f000 fca5 	bl	8001180 <setTimer1>
                }
                break;
 8000836:	e005      	b.n	8000844 <auto_run+0x108>
            default:
                break;
 8000838:	bf00      	nop
 800083a:	e004      	b.n	8000846 <auto_run+0x10a>
                break;
 800083c:	bf00      	nop
 800083e:	e002      	b.n	8000846 <auto_run+0x10a>
                break;
 8000840:	bf00      	nop
 8000842:	e000      	b.n	8000846 <auto_run+0x10a>
                break;
 8000844:	bf00      	nop
        }

        switch (secondCoupleLedAutoState) {
 8000846:	4b5f      	ldr	r3, [pc, #380]	; (80009c4 <auto_run+0x288>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b03      	cmp	r3, #3
 800084c:	d862      	bhi.n	8000914 <auto_run+0x1d8>
 800084e:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <auto_run+0x118>)
 8000850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000854:	08000865 	.word	0x08000865
 8000858:	08000873 	.word	0x08000873
 800085c:	080008a9 	.word	0x080008a9
 8000860:	080008df 	.word	0x080008df
            case LED_INIT:
                secondCoupleLedAutoState = GREEN;
 8000864:	4b57      	ldr	r3, [pc, #348]	; (80009c4 <auto_run+0x288>)
 8000866:	2202      	movs	r2, #2
 8000868:	701a      	strb	r2, [r3, #0]
                setTimer2(100);
 800086a:	2064      	movs	r0, #100	; 0x64
 800086c:	f000 fc9c 	bl	80011a8 <setTimer2>
                break;
 8000870:	e057      	b.n	8000922 <auto_run+0x1e6>
            case RED:
                displaySecondLedCouple(RED);
 8000872:	2001      	movs	r0, #1
 8000874:	f7ff fd70 	bl	8000358 <displaySecondLedCouple>
                if (timer2_flag == 1) {
 8000878:	4b53      	ldr	r3, [pc, #332]	; (80009c8 <auto_run+0x28c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d14b      	bne.n	8000918 <auto_run+0x1dc>
                    countdownSecondCoupleLed--;
 8000880:	4b52      	ldr	r3, [pc, #328]	; (80009cc <auto_run+0x290>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3b01      	subs	r3, #1
 8000886:	4a51      	ldr	r2, [pc, #324]	; (80009cc <auto_run+0x290>)
 8000888:	6013      	str	r3, [r2, #0]
                    if (countdownSecondCoupleLed == 0) {
 800088a:	4b50      	ldr	r3, [pc, #320]	; (80009cc <auto_run+0x290>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d106      	bne.n	80008a0 <auto_run+0x164>
                        countdownSecondCoupleLed = greenDelay;
 8000892:	4b49      	ldr	r3, [pc, #292]	; (80009b8 <auto_run+0x27c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a4d      	ldr	r2, [pc, #308]	; (80009cc <auto_run+0x290>)
 8000898:	6013      	str	r3, [r2, #0]
                        secondCoupleLedAutoState = GREEN;
 800089a:	4b4a      	ldr	r3, [pc, #296]	; (80009c4 <auto_run+0x288>)
 800089c:	2202      	movs	r2, #2
 800089e:	701a      	strb	r2, [r3, #0]
                    }
                    setTimer2(100);
 80008a0:	2064      	movs	r0, #100	; 0x64
 80008a2:	f000 fc81 	bl	80011a8 <setTimer2>
                }
                break;
 80008a6:	e037      	b.n	8000918 <auto_run+0x1dc>
            case GREEN:
                displaySecondLedCouple(GREEN);
 80008a8:	2002      	movs	r0, #2
 80008aa:	f7ff fd55 	bl	8000358 <displaySecondLedCouple>
                if (timer2_flag == 1) {
 80008ae:	4b46      	ldr	r3, [pc, #280]	; (80009c8 <auto_run+0x28c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d132      	bne.n	800091c <auto_run+0x1e0>
                    countdownSecondCoupleLed--;
 80008b6:	4b45      	ldr	r3, [pc, #276]	; (80009cc <auto_run+0x290>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	4a43      	ldr	r2, [pc, #268]	; (80009cc <auto_run+0x290>)
 80008be:	6013      	str	r3, [r2, #0]
                    if (countdownSecondCoupleLed == 0) {
 80008c0:	4b42      	ldr	r3, [pc, #264]	; (80009cc <auto_run+0x290>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d106      	bne.n	80008d6 <auto_run+0x19a>
                        countdownSecondCoupleLed = yellowDelay;
 80008c8:	4b3c      	ldr	r3, [pc, #240]	; (80009bc <auto_run+0x280>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a3f      	ldr	r2, [pc, #252]	; (80009cc <auto_run+0x290>)
 80008ce:	6013      	str	r3, [r2, #0]
                        secondCoupleLedAutoState = YELLOW;
 80008d0:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <auto_run+0x288>)
 80008d2:	2203      	movs	r2, #3
 80008d4:	701a      	strb	r2, [r3, #0]
                    }
                    setTimer2(100);
 80008d6:	2064      	movs	r0, #100	; 0x64
 80008d8:	f000 fc66 	bl	80011a8 <setTimer2>
                }
                break;
 80008dc:	e01e      	b.n	800091c <auto_run+0x1e0>
            case YELLOW:
                displaySecondLedCouple(YELLOW);
 80008de:	2003      	movs	r0, #3
 80008e0:	f7ff fd3a 	bl	8000358 <displaySecondLedCouple>
                if (timer2_flag == 1) {
 80008e4:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <auto_run+0x28c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d119      	bne.n	8000920 <auto_run+0x1e4>
                    countdownSecondCoupleLed--;
 80008ec:	4b37      	ldr	r3, [pc, #220]	; (80009cc <auto_run+0x290>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	4a36      	ldr	r2, [pc, #216]	; (80009cc <auto_run+0x290>)
 80008f4:	6013      	str	r3, [r2, #0]
                    if (countdownSecondCoupleLed == 0) {
 80008f6:	4b35      	ldr	r3, [pc, #212]	; (80009cc <auto_run+0x290>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d106      	bne.n	800090c <auto_run+0x1d0>
                        countdownSecondCoupleLed = redDelay;
 80008fe:	4b30      	ldr	r3, [pc, #192]	; (80009c0 <auto_run+0x284>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a32      	ldr	r2, [pc, #200]	; (80009cc <auto_run+0x290>)
 8000904:	6013      	str	r3, [r2, #0]
                        secondCoupleLedAutoState = RED;
 8000906:	4b2f      	ldr	r3, [pc, #188]	; (80009c4 <auto_run+0x288>)
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
                    }
                    setTimer2(100);
 800090c:	2064      	movs	r0, #100	; 0x64
 800090e:	f000 fc4b 	bl	80011a8 <setTimer2>
                }
                break;
 8000912:	e005      	b.n	8000920 <auto_run+0x1e4>
            default:
                break;
 8000914:	bf00      	nop
 8000916:	e004      	b.n	8000922 <auto_run+0x1e6>
                break;
 8000918:	bf00      	nop
 800091a:	e002      	b.n	8000922 <auto_run+0x1e6>
                break;
 800091c:	bf00      	nop
 800091e:	e000      	b.n	8000922 <auto_run+0x1e6>
                break;
 8000920:	bf00      	nop
        }

        switch (seg7AutoState) {
 8000922:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <auto_run+0x294>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d020      	beq.n	800096c <auto_run+0x230>
 800092a:	2b02      	cmp	r3, #2
 800092c:	dc33      	bgt.n	8000996 <auto_run+0x25a>
 800092e:	2b00      	cmp	r3, #0
 8000930:	d002      	beq.n	8000938 <auto_run+0x1fc>
 8000932:	2b01      	cmp	r3, #1
 8000934:	d007      	beq.n	8000946 <auto_run+0x20a>
                    seg7AutoState = FIRST;
                    setTimer3(50);
                }
                break;
            default:
                break;
 8000936:	e02e      	b.n	8000996 <auto_run+0x25a>
                seg7AutoState = FIRST;
 8000938:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <auto_run+0x294>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
                setTimer3(1);
 800093e:	2001      	movs	r0, #1
 8000940:	f000 fc46 	bl	80011d0 <setTimer3>
                break;
 8000944:	e02c      	b.n	80009a0 <auto_run+0x264>
                if (timer3_flag == 1) {
 8000946:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <auto_run+0x298>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d125      	bne.n	800099a <auto_run+0x25e>
                    showTimeDelay_First(countdownFirstCoupleLed, countdownSecondCoupleLed);
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <auto_run+0x278>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a1e      	ldr	r2, [pc, #120]	; (80009cc <auto_run+0x290>)
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe59 	bl	8000610 <showTimeDelay_First>
                    seg7AutoState = SECOND;
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <auto_run+0x294>)
 8000960:	2202      	movs	r2, #2
 8000962:	701a      	strb	r2, [r3, #0]
                    setTimer3(50);
 8000964:	2032      	movs	r0, #50	; 0x32
 8000966:	f000 fc33 	bl	80011d0 <setTimer3>
                break;
 800096a:	e016      	b.n	800099a <auto_run+0x25e>
                if (timer3_flag == 1) {
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <auto_run+0x298>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d114      	bne.n	800099e <auto_run+0x262>
                    showTimeDelay_Second(countdownFirstCoupleLed, countdownSecondCoupleLed);
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <auto_run+0x278>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a14      	ldr	r2, [pc, #80]	; (80009cc <auto_run+0x290>)
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	4611      	mov	r1, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe70 	bl	8000664 <showTimeDelay_Second>
                    seg7AutoState = FIRST;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <auto_run+0x294>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
                    setTimer3(50);
 800098a:	2032      	movs	r0, #50	; 0x32
 800098c:	f000 fc20 	bl	80011d0 <setTimer3>
                break;
 8000990:	e005      	b.n	800099e <auto_run+0x262>
        }
    }
 8000992:	bf00      	nop
 8000994:	e004      	b.n	80009a0 <auto_run+0x264>
                break;
 8000996:	bf00      	nop
 8000998:	e002      	b.n	80009a0 <auto_run+0x264>
                break;
 800099a:	bf00      	nop
 800099c:	e000      	b.n	80009a0 <auto_run+0x264>
                break;
 800099e:	bf00      	nop
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40010800 	.word	0x40010800
 80009a8:	200000b3 	.word	0x200000b3
 80009ac:	200000b9 	.word	0x200000b9
 80009b0:	20000084 	.word	0x20000084
 80009b4:	200000c4 	.word	0x200000c4
 80009b8:	20000044 	.word	0x20000044
 80009bc:	20000048 	.word	0x20000048
 80009c0:	20000040 	.word	0x20000040
 80009c4:	200000b7 	.word	0x200000b7
 80009c8:	2000008c 	.word	0x2000008c
 80009cc:	200000bc 	.word	0x200000bc
 80009d0:	200000c1 	.word	0x200000c1
 80009d4:	20000094 	.word	0x20000094

080009d8 <mode2_run>:

#include "fsm_manual.h"



void mode2_run() {
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
    switch (mode2Toggle) {
 80009dc:	4b4e      	ldr	r3, [pc, #312]	; (8000b18 <mode2_run+0x140>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <mode2_run+0x12>
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d00c      	beq.n	8000a02 <mode2_run+0x2a>
                toggleLeds(RED);
                setTimer1(25);
            }
            break;
        default:
            break;
 80009e8:	e016      	b.n	8000a18 <mode2_run+0x40>
            HAL_GPIO_WritePin(GPIOA, RED1_Pin | YELLOW1_Pin | GREEN1_Pin | RED2_Pin | YELLOW2_Pin | GREEN2_Pin, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	217e      	movs	r1, #126	; 0x7e
 80009ee:	484b      	ldr	r0, [pc, #300]	; (8000b1c <mode2_run+0x144>)
 80009f0:	f001 f871 	bl	8001ad6 <HAL_GPIO_WritePin>
            mode2Toggle = TOGGLE;
 80009f4:	4b48      	ldr	r3, [pc, #288]	; (8000b18 <mode2_run+0x140>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
            setTimer1(25);
 80009fa:	2019      	movs	r0, #25
 80009fc:	f000 fbc0 	bl	8001180 <setTimer1>
            break;
 8000a00:	e00a      	b.n	8000a18 <mode2_run+0x40>
            if (timer1_flag == 1) {
 8000a02:	4b47      	ldr	r3, [pc, #284]	; (8000b20 <mode2_run+0x148>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d105      	bne.n	8000a16 <mode2_run+0x3e>
                toggleLeds(RED);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff fd00 	bl	8000410 <toggleLeds>
                setTimer1(25);
 8000a10:	2019      	movs	r0, #25
 8000a12:	f000 fbb5 	bl	8001180 <setTimer1>
            break;
 8000a16:	bf00      	nop
    }

    switch (mode2Increase) {
 8000a18:	4b42      	ldr	r3, [pc, #264]	; (8000b24 <mode2_run+0x14c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <mode2_run+0x4e>
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d014      	beq.n	8000a4e <mode2_run+0x76>
                MODE = MODE1;
                setValues();
            }
            break;
        default:
            break;
 8000a24:	e03f      	b.n	8000aa6 <mode2_run+0xce>
            if (isButtonPressed(1) == 1) {
 8000a26:	2001      	movs	r0, #1
 8000a28:	f7ff fb90 	bl	800014c <isButtonPressed>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d136      	bne.n	8000aa0 <mode2_run+0xc8>
                mode2Increase = INCREASE;
 8000a32:	4b3c      	ldr	r3, [pc, #240]	; (8000b24 <mode2_run+0x14c>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	701a      	strb	r2, [r3, #0]
                redDelay += 1;
 8000a38:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <mode2_run+0x150>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4a3a      	ldr	r2, [pc, #232]	; (8000b28 <mode2_run+0x150>)
 8000a40:	6013      	str	r3, [r2, #0]
                greenDelay += 1;
 8000a42:	4b3a      	ldr	r3, [pc, #232]	; (8000b2c <mode2_run+0x154>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	4a38      	ldr	r2, [pc, #224]	; (8000b2c <mode2_run+0x154>)
 8000a4a:	6013      	str	r3, [r2, #0]
            break;
 8000a4c:	e028      	b.n	8000aa0 <mode2_run+0xc8>
            if (isButtonPressed(1) == 1) {
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f7ff fb7c 	bl	800014c <isButtonPressed>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d110      	bne.n	8000a7c <mode2_run+0xa4>
                redDelay += 1;
 8000a5a:	4b33      	ldr	r3, [pc, #204]	; (8000b28 <mode2_run+0x150>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	4a31      	ldr	r2, [pc, #196]	; (8000b28 <mode2_run+0x150>)
 8000a62:	6013      	str	r3, [r2, #0]
                greenDelay += 1;
 8000a64:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <mode2_run+0x154>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	4a30      	ldr	r2, [pc, #192]	; (8000b2c <mode2_run+0x154>)
 8000a6c:	6013      	str	r3, [r2, #0]
                if (redDelay >= 99) redDelay = 1;
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <mode2_run+0x150>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b62      	cmp	r3, #98	; 0x62
 8000a74:	dd02      	ble.n	8000a7c <mode2_run+0xa4>
 8000a76:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <mode2_run+0x150>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	601a      	str	r2, [r3, #0]
            if (isButtonPressed(2) == 1) {
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f7ff fb65 	bl	800014c <isButtonPressed>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d10d      	bne.n	8000aa4 <mode2_run+0xcc>
                HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin | EN4_Pin | EN5_Pin, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8000a8e:	4823      	ldr	r0, [pc, #140]	; (8000b1c <mode2_run+0x144>)
 8000a90:	f001 f821 	bl	8001ad6 <HAL_GPIO_WritePin>
                MODE = MODE1;
 8000a94:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <mode2_run+0x158>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
                setValues();
 8000a9a:	f000 f9f9 	bl	8000e90 <setValues>
            break;
 8000a9e:	e001      	b.n	8000aa4 <mode2_run+0xcc>
            break;
 8000aa0:	bf00      	nop
 8000aa2:	e000      	b.n	8000aa6 <mode2_run+0xce>
            break;
 8000aa4:	bf00      	nop
    }

    switch (mode2Seg) {
 8000aa6:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <mode2_run+0x15c>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d01d      	beq.n	8000aea <mode2_run+0x112>
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	dc2b      	bgt.n	8000b0a <mode2_run+0x132>
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <mode2_run+0xe4>
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d007      	beq.n	8000aca <mode2_run+0xf2>
                setTimer2(25);
                mode2Seg = FIRST;
            }
            break;
        default:
            break;
 8000aba:	e026      	b.n	8000b0a <mode2_run+0x132>
            mode2Seg = FIRST;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <mode2_run+0x15c>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
            setTimer2(25);
 8000ac2:	2019      	movs	r0, #25
 8000ac4:	f000 fb70 	bl	80011a8 <setTimer2>
            break;
 8000ac8:	e024      	b.n	8000b14 <mode2_run+0x13c>
            if (timer2_flag == 1) {
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <mode2_run+0x160>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d11d      	bne.n	8000b0e <mode2_run+0x136>
                showTimeDelay1(redDelay);
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <mode2_run+0x150>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fdf8 	bl	80006cc <showTimeDelay1>
                mode2Seg = SECOND;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <mode2_run+0x15c>)
 8000ade:	2202      	movs	r2, #2
 8000ae0:	701a      	strb	r2, [r3, #0]
                setTimer2(25);
 8000ae2:	2019      	movs	r0, #25
 8000ae4:	f000 fb60 	bl	80011a8 <setTimer2>
            break;
 8000ae8:	e011      	b.n	8000b0e <mode2_run+0x136>
            if (timer2_flag == 1) {
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <mode2_run+0x160>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d10f      	bne.n	8000b12 <mode2_run+0x13a>
                showTimeDelay2(redDelay);
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <mode2_run+0x150>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fe02 	bl	8000700 <showTimeDelay2>
                setTimer2(25);
 8000afc:	2019      	movs	r0, #25
 8000afe:	f000 fb53 	bl	80011a8 <setTimer2>
                mode2Seg = FIRST;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <mode2_run+0x15c>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
            break;
 8000b08:	e003      	b.n	8000b12 <mode2_run+0x13a>
            break;
 8000b0a:	bf00      	nop
 8000b0c:	e002      	b.n	8000b14 <mode2_run+0x13c>
            break;
 8000b0e:	bf00      	nop
 8000b10:	e000      	b.n	8000b14 <mode2_run+0x13c>
            break;
 8000b12:	bf00      	nop
    }
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000b8 	.word	0x200000b8
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	20000084 	.word	0x20000084
 8000b24:	200000c0 	.word	0x200000c0
 8000b28:	20000040 	.word	0x20000040
 8000b2c:	20000044 	.word	0x20000044
 8000b30:	200000b3 	.word	0x200000b3
 8000b34:	200000b4 	.word	0x200000b4
 8000b38:	2000008c 	.word	0x2000008c

08000b3c <mode3_run>:

void mode3_run() {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
    switch (mode3Toggle) {
 8000b40:	4b4e      	ldr	r3, [pc, #312]	; (8000c7c <mode3_run+0x140>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <mode3_run+0x12>
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d00c      	beq.n	8000b66 <mode3_run+0x2a>
                toggleLeds(YELLOW);
                setTimer3(25);
            }
            break;
        default:
            break;
 8000b4c:	e016      	b.n	8000b7c <mode3_run+0x40>
            HAL_GPIO_WritePin(GPIOA, RED1_Pin | YELLOW1_Pin | GREEN1_Pin | RED2_Pin | YELLOW2_Pin | GREEN2_Pin, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	217e      	movs	r1, #126	; 0x7e
 8000b52:	484b      	ldr	r0, [pc, #300]	; (8000c80 <mode3_run+0x144>)
 8000b54:	f000 ffbf 	bl	8001ad6 <HAL_GPIO_WritePin>
            mode3Toggle = TOGGLE;
 8000b58:	4b48      	ldr	r3, [pc, #288]	; (8000c7c <mode3_run+0x140>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
            setTimer3(25);
 8000b5e:	2019      	movs	r0, #25
 8000b60:	f000 fb36 	bl	80011d0 <setTimer3>
            break;
 8000b64:	e00a      	b.n	8000b7c <mode3_run+0x40>
            if (timer3_flag == 1) {
 8000b66:	4b47      	ldr	r3, [pc, #284]	; (8000c84 <mode3_run+0x148>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d105      	bne.n	8000b7a <mode3_run+0x3e>
                toggleLeds(YELLOW);
 8000b6e:	2003      	movs	r0, #3
 8000b70:	f7ff fc4e 	bl	8000410 <toggleLeds>
                setTimer3(25);
 8000b74:	2019      	movs	r0, #25
 8000b76:	f000 fb2b 	bl	80011d0 <setTimer3>
            break;
 8000b7a:	bf00      	nop
    }

    switch (mode3Increase) {
 8000b7c:	4b42      	ldr	r3, [pc, #264]	; (8000c88 <mode3_run+0x14c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <mode3_run+0x4e>
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d014      	beq.n	8000bb2 <mode3_run+0x76>
                MODE = MODE1;
                setValues();
            }
            break;
        default:
            break;
 8000b88:	e03f      	b.n	8000c0a <mode3_run+0xce>
            if (isButtonPressed(1) == 1) {
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f7ff fade 	bl	800014c <isButtonPressed>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d136      	bne.n	8000c04 <mode3_run+0xc8>
                mode3Increase = INCREASE;
 8000b96:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <mode3_run+0x14c>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
                yellowDelay += 1;
 8000b9c:	4b3b      	ldr	r3, [pc, #236]	; (8000c8c <mode3_run+0x150>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	4a3a      	ldr	r2, [pc, #232]	; (8000c8c <mode3_run+0x150>)
 8000ba4:	6013      	str	r3, [r2, #0]
                redDelay += 1;
 8000ba6:	4b3a      	ldr	r3, [pc, #232]	; (8000c90 <mode3_run+0x154>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a38      	ldr	r2, [pc, #224]	; (8000c90 <mode3_run+0x154>)
 8000bae:	6013      	str	r3, [r2, #0]
            break;
 8000bb0:	e028      	b.n	8000c04 <mode3_run+0xc8>
            if (isButtonPressed(1) == 1) {
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f7ff faca 	bl	800014c <isButtonPressed>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d110      	bne.n	8000be0 <mode3_run+0xa4>
                yellowDelay += 1;
 8000bbe:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <mode3_run+0x150>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a31      	ldr	r2, [pc, #196]	; (8000c8c <mode3_run+0x150>)
 8000bc6:	6013      	str	r3, [r2, #0]
                redDelay += 1;
 8000bc8:	4b31      	ldr	r3, [pc, #196]	; (8000c90 <mode3_run+0x154>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4a30      	ldr	r2, [pc, #192]	; (8000c90 <mode3_run+0x154>)
 8000bd0:	6013      	str	r3, [r2, #0]
                if (yellowDelay >= 99) yellowDelay = 1;
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <mode3_run+0x150>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b62      	cmp	r3, #98	; 0x62
 8000bd8:	dd02      	ble.n	8000be0 <mode3_run+0xa4>
 8000bda:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <mode3_run+0x150>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	601a      	str	r2, [r3, #0]
            if (isButtonPressed(2) == 1) {
 8000be0:	2002      	movs	r0, #2
 8000be2:	f7ff fab3 	bl	800014c <isButtonPressed>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d10d      	bne.n	8000c08 <mode3_run+0xcc>
                HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin | EN4_Pin | EN5_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8000bf2:	4823      	ldr	r0, [pc, #140]	; (8000c80 <mode3_run+0x144>)
 8000bf4:	f000 ff6f 	bl	8001ad6 <HAL_GPIO_WritePin>
                MODE = MODE1;
 8000bf8:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <mode3_run+0x158>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
                setValues();
 8000bfe:	f000 f947 	bl	8000e90 <setValues>
            break;
 8000c02:	e001      	b.n	8000c08 <mode3_run+0xcc>
            break;
 8000c04:	bf00      	nop
 8000c06:	e000      	b.n	8000c0a <mode3_run+0xce>
            break;
 8000c08:	bf00      	nop
    }

    switch (mode3Seg) {
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <mode3_run+0x15c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d01d      	beq.n	8000c4e <mode3_run+0x112>
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	dc2b      	bgt.n	8000c6e <mode3_run+0x132>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <mode3_run+0xe4>
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d007      	beq.n	8000c2e <mode3_run+0xf2>
                setTimer4(25);
                mode3Seg = FIRST;
            }
            break;
        default:
            break;
 8000c1e:	e026      	b.n	8000c6e <mode3_run+0x132>
            mode3Seg = FIRST;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <mode3_run+0x15c>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
            setTimer4(25);
 8000c26:	2019      	movs	r0, #25
 8000c28:	f000 fae6 	bl	80011f8 <setTimer4>
            break;
 8000c2c:	e024      	b.n	8000c78 <mode3_run+0x13c>
            if (timer4_flag == 1) {
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <mode3_run+0x160>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d11d      	bne.n	8000c72 <mode3_run+0x136>
                showTimeDelay1(yellowDelay);
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <mode3_run+0x150>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fd46 	bl	80006cc <showTimeDelay1>
                mode3Seg = SECOND;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <mode3_run+0x15c>)
 8000c42:	2202      	movs	r2, #2
 8000c44:	701a      	strb	r2, [r3, #0]
                setTimer4(25);
 8000c46:	2019      	movs	r0, #25
 8000c48:	f000 fad6 	bl	80011f8 <setTimer4>
            break;
 8000c4c:	e011      	b.n	8000c72 <mode3_run+0x136>
            if (timer4_flag == 1) {
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <mode3_run+0x160>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d10f      	bne.n	8000c76 <mode3_run+0x13a>
                showTimeDelay2(yellowDelay);
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <mode3_run+0x150>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fd50 	bl	8000700 <showTimeDelay2>
                setTimer4(25);
 8000c60:	2019      	movs	r0, #25
 8000c62:	f000 fac9 	bl	80011f8 <setTimer4>
                mode3Seg = FIRST;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <mode3_run+0x15c>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
            break;
 8000c6c:	e003      	b.n	8000c76 <mode3_run+0x13a>
            break;
 8000c6e:	bf00      	nop
 8000c70:	e002      	b.n	8000c78 <mode3_run+0x13c>
            break;
 8000c72:	bf00      	nop
 8000c74:	e000      	b.n	8000c78 <mode3_run+0x13c>
            break;
 8000c76:	bf00      	nop
    }
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200000b5 	.word	0x200000b5
 8000c80:	40010800 	.word	0x40010800
 8000c84:	20000094 	.word	0x20000094
 8000c88:	200000ba 	.word	0x200000ba
 8000c8c:	20000048 	.word	0x20000048
 8000c90:	20000040 	.word	0x20000040
 8000c94:	200000b3 	.word	0x200000b3
 8000c98:	200000b1 	.word	0x200000b1
 8000c9c:	2000009c 	.word	0x2000009c

08000ca0 <mode4_run>:

void mode4_run() {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
    switch (mode4Toggle) {
 8000ca4:	4b4e      	ldr	r3, [pc, #312]	; (8000de0 <mode4_run+0x140>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <mode4_run+0x12>
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d00c      	beq.n	8000cca <mode4_run+0x2a>
                toggleLeds(GREEN);
                setTimer5(25);
            }
            break;
        default:
            break;
 8000cb0:	e016      	b.n	8000ce0 <mode4_run+0x40>
            HAL_GPIO_WritePin(GPIOA, RED1_Pin | YELLOW1_Pin | GREEN1_Pin | RED2_Pin | YELLOW2_Pin | GREEN2_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	217e      	movs	r1, #126	; 0x7e
 8000cb6:	484b      	ldr	r0, [pc, #300]	; (8000de4 <mode4_run+0x144>)
 8000cb8:	f000 ff0d 	bl	8001ad6 <HAL_GPIO_WritePin>
            mode4Toggle = TOGGLE;
 8000cbc:	4b48      	ldr	r3, [pc, #288]	; (8000de0 <mode4_run+0x140>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
            setTimer5(25);
 8000cc2:	2019      	movs	r0, #25
 8000cc4:	f000 faac 	bl	8001220 <setTimer5>
            break;
 8000cc8:	e00a      	b.n	8000ce0 <mode4_run+0x40>
            if (timer5_flag == 1) {
 8000cca:	4b47      	ldr	r3, [pc, #284]	; (8000de8 <mode4_run+0x148>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d105      	bne.n	8000cde <mode4_run+0x3e>
                toggleLeds(GREEN);
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f7ff fb9c 	bl	8000410 <toggleLeds>
                setTimer5(25);
 8000cd8:	2019      	movs	r0, #25
 8000cda:	f000 faa1 	bl	8001220 <setTimer5>
            break;
 8000cde:	bf00      	nop
    }

    switch (mode4Increase) {
 8000ce0:	4b42      	ldr	r3, [pc, #264]	; (8000dec <mode4_run+0x14c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <mode4_run+0x4e>
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d014      	beq.n	8000d16 <mode4_run+0x76>
                MODE = MODE1;
                setValues();
            }
            break;
        default:
            break;
 8000cec:	e03f      	b.n	8000d6e <mode4_run+0xce>
            if (isButtonPressed(1) == 1) {
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f7ff fa2c 	bl	800014c <isButtonPressed>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d136      	bne.n	8000d68 <mode4_run+0xc8>
                mode4Increase = INCREASE;
 8000cfa:	4b3c      	ldr	r3, [pc, #240]	; (8000dec <mode4_run+0x14c>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	701a      	strb	r2, [r3, #0]
                greenDelay += 1;
 8000d00:	4b3b      	ldr	r3, [pc, #236]	; (8000df0 <mode4_run+0x150>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	4a3a      	ldr	r2, [pc, #232]	; (8000df0 <mode4_run+0x150>)
 8000d08:	6013      	str	r3, [r2, #0]
                redDelay += 1;
 8000d0a:	4b3a      	ldr	r3, [pc, #232]	; (8000df4 <mode4_run+0x154>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	4a38      	ldr	r2, [pc, #224]	; (8000df4 <mode4_run+0x154>)
 8000d12:	6013      	str	r3, [r2, #0]
            break;
 8000d14:	e028      	b.n	8000d68 <mode4_run+0xc8>
            if (isButtonPressed(1) == 1) {
 8000d16:	2001      	movs	r0, #1
 8000d18:	f7ff fa18 	bl	800014c <isButtonPressed>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d110      	bne.n	8000d44 <mode4_run+0xa4>
                greenDelay += 1;
 8000d22:	4b33      	ldr	r3, [pc, #204]	; (8000df0 <mode4_run+0x150>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	3301      	adds	r3, #1
 8000d28:	4a31      	ldr	r2, [pc, #196]	; (8000df0 <mode4_run+0x150>)
 8000d2a:	6013      	str	r3, [r2, #0]
                redDelay += 1;
 8000d2c:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <mode4_run+0x154>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a30      	ldr	r2, [pc, #192]	; (8000df4 <mode4_run+0x154>)
 8000d34:	6013      	str	r3, [r2, #0]
                if (greenDelay >= 99) greenDelay = 1;
 8000d36:	4b2e      	ldr	r3, [pc, #184]	; (8000df0 <mode4_run+0x150>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b62      	cmp	r3, #98	; 0x62
 8000d3c:	dd02      	ble.n	8000d44 <mode4_run+0xa4>
 8000d3e:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <mode4_run+0x150>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
            if (isButtonPressed(2) == 1) {
 8000d44:	2002      	movs	r0, #2
 8000d46:	f7ff fa01 	bl	800014c <isButtonPressed>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d10d      	bne.n	8000d6c <mode4_run+0xcc>
                HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin | EN4_Pin | EN5_Pin, GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8000d56:	4823      	ldr	r0, [pc, #140]	; (8000de4 <mode4_run+0x144>)
 8000d58:	f000 febd 	bl	8001ad6 <HAL_GPIO_WritePin>
                MODE = MODE1;
 8000d5c:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <mode4_run+0x158>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
                setValues();
 8000d62:	f000 f895 	bl	8000e90 <setValues>
            break;
 8000d66:	e001      	b.n	8000d6c <mode4_run+0xcc>
            break;
 8000d68:	bf00      	nop
 8000d6a:	e000      	b.n	8000d6e <mode4_run+0xce>
            break;
 8000d6c:	bf00      	nop
    }

    switch (mode4Seg) {
 8000d6e:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <mode4_run+0x15c>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d01d      	beq.n	8000db2 <mode4_run+0x112>
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	dc2b      	bgt.n	8000dd2 <mode4_run+0x132>
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <mode4_run+0xe4>
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d007      	beq.n	8000d92 <mode4_run+0xf2>
                setTimer6(25);
                mode4Seg = FIRST;
            }
            break;
        default:
            break;
 8000d82:	e026      	b.n	8000dd2 <mode4_run+0x132>
            mode4Seg = FIRST;
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <mode4_run+0x15c>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
            setTimer6(25);
 8000d8a:	2019      	movs	r0, #25
 8000d8c:	f000 fa5c 	bl	8001248 <setTimer6>
            break;
 8000d90:	e024      	b.n	8000ddc <mode4_run+0x13c>
            if (timer6_flag == 1) {
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <mode4_run+0x160>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d11d      	bne.n	8000dd6 <mode4_run+0x136>
                showTimeDelay1(greenDelay);
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <mode4_run+0x150>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fc94 	bl	80006cc <showTimeDelay1>
                mode4Seg = SECOND;
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <mode4_run+0x15c>)
 8000da6:	2202      	movs	r2, #2
 8000da8:	701a      	strb	r2, [r3, #0]
                setTimer6(25);
 8000daa:	2019      	movs	r0, #25
 8000dac:	f000 fa4c 	bl	8001248 <setTimer6>
            break;
 8000db0:	e011      	b.n	8000dd6 <mode4_run+0x136>
            if (timer6_flag == 1) {
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <mode4_run+0x160>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d10f      	bne.n	8000dda <mode4_run+0x13a>
                showTimeDelay2(greenDelay);
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <mode4_run+0x150>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fc9e 	bl	8000700 <showTimeDelay2>
                setTimer6(25);
 8000dc4:	2019      	movs	r0, #25
 8000dc6:	f000 fa3f 	bl	8001248 <setTimer6>
                mode4Seg = FIRST;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <mode4_run+0x15c>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
            break;
 8000dd0:	e003      	b.n	8000dda <mode4_run+0x13a>
            break;
 8000dd2:	bf00      	nop
 8000dd4:	e002      	b.n	8000ddc <mode4_run+0x13c>
            break;
 8000dd6:	bf00      	nop
 8000dd8:	e000      	b.n	8000ddc <mode4_run+0x13c>
            break;
 8000dda:	bf00      	nop
    }
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200000b2 	.word	0x200000b2
 8000de4:	40010800 	.word	0x40010800
 8000de8:	200000a4 	.word	0x200000a4
 8000dec:	200000b0 	.word	0x200000b0
 8000df0:	20000044 	.word	0x20000044
 8000df4:	20000040 	.word	0x20000040
 8000df8:	200000b3 	.word	0x200000b3
 8000dfc:	200000b6 	.word	0x200000b6
 8000e00:	200000ac 	.word	0x200000ac

08000e04 <manual_run>:

void manual_run() {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    switch (MODE) {
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <manual_run+0x84>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d01e      	beq.n	8000e4e <manual_run+0x4a>
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	dc30      	bgt.n	8000e76 <manual_run+0x72>
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d002      	beq.n	8000e1e <manual_run+0x1a>
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d00c      	beq.n	8000e36 <manual_run+0x32>
                MODE = MODE1;
                setValues();
            }
            break;
        default:
            break;
 8000e1c:	e02b      	b.n	8000e76 <manual_run+0x72>
            mode2_run();
 8000e1e:	f7ff fddb 	bl	80009d8 <mode2_run>
            if (isButtonPressed(0) == 1) {
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff f992 	bl	800014c <isButtonPressed>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d125      	bne.n	8000e7a <manual_run+0x76>
                MODE = MODE3;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <manual_run+0x84>)
 8000e30:	2203      	movs	r2, #3
 8000e32:	701a      	strb	r2, [r3, #0]
            break;
 8000e34:	e021      	b.n	8000e7a <manual_run+0x76>
            mode3_run();
 8000e36:	f7ff fe81 	bl	8000b3c <mode3_run>
            if (isButtonPressed(0) == 1) {
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff f986 	bl	800014c <isButtonPressed>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d11b      	bne.n	8000e7e <manual_run+0x7a>
                MODE = MODE4;
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <manual_run+0x84>)
 8000e48:	2204      	movs	r2, #4
 8000e4a:	701a      	strb	r2, [r3, #0]
            break;
 8000e4c:	e017      	b.n	8000e7e <manual_run+0x7a>
            mode4_run();
 8000e4e:	f7ff ff27 	bl	8000ca0 <mode4_run>
            if (isButtonPressed(0) == 1) {
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff f97a 	bl	800014c <isButtonPressed>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d111      	bne.n	8000e82 <manual_run+0x7e>
                HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin | EN4_Pin | EN5_Pin, GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8000e64:	4809      	ldr	r0, [pc, #36]	; (8000e8c <manual_run+0x88>)
 8000e66:	f000 fe36 	bl	8001ad6 <HAL_GPIO_WritePin>
                MODE = MODE1;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <manual_run+0x84>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
                setValues();
 8000e70:	f000 f80e 	bl	8000e90 <setValues>
            break;
 8000e74:	e005      	b.n	8000e82 <manual_run+0x7e>
            break;
 8000e76:	bf00      	nop
 8000e78:	e004      	b.n	8000e84 <manual_run+0x80>
            break;
 8000e7a:	bf00      	nop
 8000e7c:	e002      	b.n	8000e84 <manual_run+0x80>
            break;
 8000e7e:	bf00      	nop
 8000e80:	e000      	b.n	8000e84 <manual_run+0x80>
            break;
 8000e82:	bf00      	nop
    }
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200000b3 	.word	0x200000b3
 8000e8c:	40010800 	.word	0x40010800

08000e90 <setValues>:


int countdownFirstCoupleLed;
int countdownSecondCoupleLed;

void setValues(void){
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
	MODE = MODE1;
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <setValues+0x6c>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]

	mode2Toggle = TOGGLE_INIT;
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <setValues+0x70>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
	mode2Seg = SEG_INIT;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <setValues+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
	mode2Increase = INCREASE_INIT;
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <setValues+0x78>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]

	mode3Toggle = TOGGLE_INIT;
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <setValues+0x7c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
	mode3Seg = SEG_INIT;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <setValues+0x80>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
	mode3Increase = INCREASE_INIT;
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <setValues+0x84>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]

	mode4Toggle = TOGGLE_INIT;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <setValues+0x88>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
	mode4Seg = SEG_INIT;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <setValues+0x8c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
	mode4Increase = INCREASE_INIT;
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <setValues+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]

	firstCoupleLedAutoState = LED_INIT;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <setValues+0x94>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
	secondCoupleLedAutoState = LED_INIT;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <setValues+0x98>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
	seg7AutoState = SEG_INIT;
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <setValues+0x9c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]

	countdownFirstCoupleLed = redDelay;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <setValues+0xa0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <setValues+0xa4>)
 8000ee8:	6013      	str	r3, [r2, #0]
	countdownSecondCoupleLed = greenDelay;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <setValues+0xa8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <setValues+0xac>)
 8000ef0:	6013      	str	r3, [r2, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	200000b3 	.word	0x200000b3
 8000f00:	200000b8 	.word	0x200000b8
 8000f04:	200000b4 	.word	0x200000b4
 8000f08:	200000c0 	.word	0x200000c0
 8000f0c:	200000b5 	.word	0x200000b5
 8000f10:	200000b1 	.word	0x200000b1
 8000f14:	200000ba 	.word	0x200000ba
 8000f18:	200000b2 	.word	0x200000b2
 8000f1c:	200000b6 	.word	0x200000b6
 8000f20:	200000b0 	.word	0x200000b0
 8000f24:	200000b9 	.word	0x200000b9
 8000f28:	200000b7 	.word	0x200000b7
 8000f2c:	200000c1 	.word	0x200000c1
 8000f30:	20000040 	.word	0x20000040
 8000f34:	200000c4 	.word	0x200000c4
 8000f38:	20000044 	.word	0x20000044
 8000f3c:	200000bc 	.word	0x200000bc

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f44:	f000 fac6 	bl	80014d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f48:	f000 f814 	bl	8000f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4c:	f000 f89a 	bl	8001084 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f50:	f000 f84c 	bl	8000fec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f54:	4806      	ldr	r0, [pc, #24]	; (8000f70 <main+0x30>)
 8000f56:	f001 fa1b 	bl	8002390 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setValues();
 8000f5a:	f7ff ff99 	bl	8000e90 <setValues>
  displayFirstLedCouple(LED_INIT);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff f99e 	bl	80002a0 <displayFirstLedCouple>
  while (1)
  {
    /* USER CODE END WHILE */
	  auto_run();
 8000f64:	f7ff fbea 	bl	800073c <auto_run>
	  manual_run();
 8000f68:	f7ff ff4c 	bl	8000e04 <manual_run>
	  auto_run();
 8000f6c:	e7fa      	b.n	8000f64 <main+0x24>
 8000f6e:	bf00      	nop
 8000f70:	200000c8 	.word	0x200000c8

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b090      	sub	sp, #64	; 0x40
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0318 	add.w	r3, r7, #24
 8000f7e:	2228      	movs	r2, #40	; 0x28
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 fdb4 	bl	8002af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f96:	2302      	movs	r3, #2
 8000f98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9e:	2310      	movs	r3, #16
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fdc4 	bl	8001b38 <HAL_RCC_OscConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fb6:	f000 f8de 	bl	8001176 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fba:	230f      	movs	r3, #15
 8000fbc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 f830 	bl	8002038 <HAL_RCC_ClockConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fde:	f000 f8ca 	bl	8001176 <Error_Handler>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3740      	adds	r7, #64	; 0x40
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001000:	463b      	mov	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <MX_TIM2_Init+0x94>)
 800100a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <MX_TIM2_Init+0x94>)
 8001012:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001016:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_TIM2_Init+0x94>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_TIM2_Init+0x94>)
 8001020:	220a      	movs	r2, #10
 8001022:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <MX_TIM2_Init+0x94>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_TIM2_Init+0x94>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001030:	4813      	ldr	r0, [pc, #76]	; (8001080 <MX_TIM2_Init+0x94>)
 8001032:	f001 f95d 	bl	80022f0 <HAL_TIM_Base_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800103c:	f000 f89b 	bl	8001176 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4619      	mov	r1, r3
 800104c:	480c      	ldr	r0, [pc, #48]	; (8001080 <MX_TIM2_Init+0x94>)
 800104e:	f001 fadb 	bl	8002608 <HAL_TIM_ConfigClockSource>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001058:	f000 f88d 	bl	8001176 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001064:	463b      	mov	r3, r7
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_TIM2_Init+0x94>)
 800106a:	f001 fcb3 	bl	80029d4 <HAL_TIMEx_MasterConfigSynchronization>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001074:	f000 f87f 	bl	8001176 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200000c8 	.word	0x200000c8

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <MX_GPIO_Init+0xc4>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a2a      	ldr	r2, [pc, #168]	; (8001148 <MX_GPIO_Init+0xc4>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b28      	ldr	r3, [pc, #160]	; (8001148 <MX_GPIO_Init+0xc4>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <MX_GPIO_Init+0xc4>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a24      	ldr	r2, [pc, #144]	; (8001148 <MX_GPIO_Init+0xc4>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <MX_GPIO_Init+0xc4>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 80010c8:	2200      	movs	r2, #0
 80010ca:	217e      	movs	r1, #126	; 0x7e
 80010cc:	481f      	ldr	r0, [pc, #124]	; (800114c <MX_GPIO_Init+0xc8>)
 80010ce:	f000 fd02 	bl	8001ad6 <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 80010d8:	481c      	ldr	r0, [pc, #112]	; (800114c <MX_GPIO_Init+0xc8>)
 80010da:	f000 fcfc 	bl	8001ad6 <HAL_GPIO_WritePin>
                          |EN4_Pin|EN5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A1_Pin|B1_Pin|C1_Pin|D2_Pin
 80010de:	2200      	movs	r2, #0
 80010e0:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80010e4:	481a      	ldr	r0, [pc, #104]	; (8001150 <MX_GPIO_Init+0xcc>)
 80010e6:	f000 fcf6 	bl	8001ad6 <HAL_GPIO_WritePin>
                          |B2_Pin|C2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN4_Pin EN5_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 80010ea:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 80010ee:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN4_Pin|EN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2302      	movs	r3, #2
 80010fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	4619      	mov	r1, r3
 8001102:	4812      	ldr	r0, [pc, #72]	; (800114c <MX_GPIO_Init+0xc8>)
 8001104:	f000 fb56 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin B1_Pin C1_Pin D2_Pin
                           E2_Pin F2_Pin G2_Pin D1_Pin
                           E1_Pin F1_Pin G1_Pin A2_Pin
                           B2_Pin C2_Pin */
  GPIO_InitStruct.Pin = A1_Pin|B1_Pin|C1_Pin|D2_Pin
 8001108:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800110c:	60bb      	str	r3, [r7, #8]
                          |E2_Pin|F2_Pin|G2_Pin|D1_Pin
                          |E1_Pin|F1_Pin|G1_Pin|A2_Pin
                          |B2_Pin|C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2302      	movs	r3, #2
 8001118:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	4619      	mov	r1, r3
 8001120:	480b      	ldr	r0, [pc, #44]	; (8001150 <MX_GPIO_Init+0xcc>)
 8001122:	f000 fb47 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001126:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800112a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001130:	2301      	movs	r3, #1
 8001132:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	4619      	mov	r1, r3
 800113a:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_GPIO_Init+0xc8>)
 800113c:	f000 fb3a 	bl	80017b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40021000 	.word	0x40021000
 800114c:	40010800 	.word	0x40010800
 8001150:	40010c00 	.word	0x40010c00

08001154 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001164:	d103      	bne.n	800116e <HAL_TIM_PeriodElapsedCallback+0x1a>
        timer_run();
 8001166:	f000 f883 	bl	8001270 <timer_run>
        getKeyInput();
 800116a:	f7ff f819 	bl	80001a0 <getKeyInput>
    }
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117a:	b672      	cpsid	i
}
 800117c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800117e:	e7fe      	b.n	800117e <Error_Handler+0x8>

08001180 <setTimer1>:
int timer5_flag = 0;

int timer6_counter = 0;
int timer6_flag = 0;

void setTimer1(int duration) {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    timer1_counter = duration;
 8001188:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <setTimer1+0x20>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
    timer1_flag = 0;
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <setTimer1+0x24>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000080 	.word	0x20000080
 80011a4:	20000084 	.word	0x20000084

080011a8 <setTimer2>:

void setTimer2(int duration) {
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    timer2_counter = duration;
 80011b0:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <setTimer2+0x20>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
    timer2_flag = 0;
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <setTimer2+0x24>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000088 	.word	0x20000088
 80011cc:	2000008c 	.word	0x2000008c

080011d0 <setTimer3>:

void setTimer3(int duration) {
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    timer3_counter = duration;
 80011d8:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <setTimer3+0x20>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
    timer3_flag = 0;
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <setTimer3+0x24>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000090 	.word	0x20000090
 80011f4:	20000094 	.word	0x20000094

080011f8 <setTimer4>:

void setTimer4(int duration) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    timer4_counter = duration;
 8001200:	4a05      	ldr	r2, [pc, #20]	; (8001218 <setTimer4+0x20>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
    timer4_flag = 0;
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <setTimer4+0x24>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000098 	.word	0x20000098
 800121c:	2000009c 	.word	0x2000009c

08001220 <setTimer5>:

void setTimer5(int duration) {
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    timer5_counter = duration;
 8001228:	4a05      	ldr	r2, [pc, #20]	; (8001240 <setTimer5+0x20>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
    timer5_flag = 0;
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <setTimer5+0x24>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	200000a0 	.word	0x200000a0
 8001244:	200000a4 	.word	0x200000a4

08001248 <setTimer6>:

void setTimer6(int duration) {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    timer6_counter = duration;
 8001250:	4a05      	ldr	r2, [pc, #20]	; (8001268 <setTimer6+0x20>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
    timer6_flag = 0;
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <setTimer6+0x24>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200000a8 	.word	0x200000a8
 800126c:	200000ac 	.word	0x200000ac

08001270 <timer_run>:

void timer_run() {
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
    if (timer1_counter > 0) {
 8001274:	4b31      	ldr	r3, [pc, #196]	; (800133c <timer_run+0xcc>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	dd0b      	ble.n	8001294 <timer_run+0x24>
        timer1_counter--;
 800127c:	4b2f      	ldr	r3, [pc, #188]	; (800133c <timer_run+0xcc>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3b01      	subs	r3, #1
 8001282:	4a2e      	ldr	r2, [pc, #184]	; (800133c <timer_run+0xcc>)
 8001284:	6013      	str	r3, [r2, #0]
        if (timer1_counter == 0) {
 8001286:	4b2d      	ldr	r3, [pc, #180]	; (800133c <timer_run+0xcc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <timer_run+0x24>
            timer1_flag = 1;
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <timer_run+0xd0>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer2_counter > 0) {
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <timer_run+0xd4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	dd0b      	ble.n	80012b4 <timer_run+0x44>
        timer2_counter--;
 800129c:	4b29      	ldr	r3, [pc, #164]	; (8001344 <timer_run+0xd4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	4a28      	ldr	r2, [pc, #160]	; (8001344 <timer_run+0xd4>)
 80012a4:	6013      	str	r3, [r2, #0]
        if (timer2_counter == 0) {
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <timer_run+0xd4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <timer_run+0x44>
            timer2_flag = 1;
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <timer_run+0xd8>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer3_counter > 0) {
 80012b4:	4b25      	ldr	r3, [pc, #148]	; (800134c <timer_run+0xdc>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	dd0b      	ble.n	80012d4 <timer_run+0x64>
        timer3_counter--;
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <timer_run+0xdc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	4a22      	ldr	r2, [pc, #136]	; (800134c <timer_run+0xdc>)
 80012c4:	6013      	str	r3, [r2, #0]
        if (timer3_counter == 0) {
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <timer_run+0xdc>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d102      	bne.n	80012d4 <timer_run+0x64>
            timer3_flag = 1;
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <timer_run+0xe0>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer4_counter > 0) {
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <timer_run+0xe4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	dd0b      	ble.n	80012f4 <timer_run+0x84>
        timer4_counter--;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <timer_run+0xe4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <timer_run+0xe4>)
 80012e4:	6013      	str	r3, [r2, #0]
        if (timer4_counter == 0) {
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <timer_run+0xe4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <timer_run+0x84>
            timer4_flag = 1;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <timer_run+0xe8>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer5_counter > 0) {
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <timer_run+0xec>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	dd0b      	ble.n	8001314 <timer_run+0xa4>
        timer5_counter--;
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <timer_run+0xec>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3b01      	subs	r3, #1
 8001302:	4a16      	ldr	r2, [pc, #88]	; (800135c <timer_run+0xec>)
 8001304:	6013      	str	r3, [r2, #0]
        if (timer5_counter == 0) {
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <timer_run+0xec>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <timer_run+0xa4>
            timer5_flag = 1;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <timer_run+0xf0>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer6_counter > 0) {
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <timer_run+0xf4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	dd0b      	ble.n	8001334 <timer_run+0xc4>
        timer6_counter--;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <timer_run+0xf4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3b01      	subs	r3, #1
 8001322:	4a10      	ldr	r2, [pc, #64]	; (8001364 <timer_run+0xf4>)
 8001324:	6013      	str	r3, [r2, #0]
        if (timer6_counter == 0) {
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <timer_run+0xf4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <timer_run+0xc4>
            timer6_flag = 1;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <timer_run+0xf8>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
        }
    }
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	20000080 	.word	0x20000080
 8001340:	20000084 	.word	0x20000084
 8001344:	20000088 	.word	0x20000088
 8001348:	2000008c 	.word	0x2000008c
 800134c:	20000090 	.word	0x20000090
 8001350:	20000094 	.word	0x20000094
 8001354:	20000098 	.word	0x20000098
 8001358:	2000009c 	.word	0x2000009c
 800135c:	200000a0 	.word	0x200000a0
 8001360:	200000a4 	.word	0x200000a4
 8001364:	200000a8 	.word	0x200000a8
 8001368:	200000ac 	.word	0x200000ac

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_MspInit+0x5c>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <HAL_MspInit+0x5c>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6193      	str	r3, [r2, #24]
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_MspInit+0x5c>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_MspInit+0x5c>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_MspInit+0x5c>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	61d3      	str	r3, [r2, #28]
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_MspInit+0x5c>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_MspInit+0x60>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_MspInit+0x60>)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010000 	.word	0x40010000

080013d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e0:	d113      	bne.n	800140a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_TIM_Base_MspInit+0x44>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <HAL_TIM_Base_MspInit+0x44>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	61d3      	str	r3, [r2, #28]
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_TIM_Base_MspInit+0x44>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	201c      	movs	r0, #28
 8001400:	f000 f9a1 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001404:	201c      	movs	r0, #28
 8001406:	f000 f9ba 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145e:	f000 f87f 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <TIM2_IRQHandler+0x10>)
 800146e:	f000 ffdb 	bl	8002428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200000c8 	.word	0x200000c8

0800147c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001488:	f7ff fff8 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800148e:	490c      	ldr	r1, [pc, #48]	; (80014c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001490:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014a4:	4c09      	ldr	r4, [pc, #36]	; (80014cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b2:	f001 faf9 	bl	8002aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014b6:	f7ff fd43 	bl	8000f40 <main>
  bx lr
 80014ba:	4770      	bx	lr
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80014c4:	08002b50 	.word	0x08002b50
  ldr r2, =_sbss
 80014c8:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80014cc:	20000114 	.word	0x20000114

080014d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC1_2_IRQHandler>
	...

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_Init+0x28>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_Init+0x28>)
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 f923 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	200f      	movs	r0, #15
 80014ec:	f000 f808 	bl	8001500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff ff3c 	bl	800136c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40022000 	.word	0x40022000

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x54>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x58>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	fbb3 f3f1 	udiv	r3, r3, r1
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f93b 	bl	800179a <HAL_SYSTICK_Config>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00e      	b.n	800154c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d80a      	bhi.n	800154a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f000 f903 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <HAL_InitTick+0x5c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	2000004c 	.word	0x2000004c
 8001558:	20000054 	.word	0x20000054
 800155c:	20000050 	.word	0x20000050

08001560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x1c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x20>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a03      	ldr	r2, [pc, #12]	; (8001580 <HAL_IncTick+0x20>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	20000054 	.word	0x20000054
 8001580:	20000110 	.word	0x20000110

08001584 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b02      	ldr	r3, [pc, #8]	; (8001594 <HAL_GetTick+0x10>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	20000110 	.word	0x20000110

08001598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	2b00      	cmp	r3, #0
 800160c:	db0b      	blt.n	8001626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	f003 021f 	and.w	r2, r3, #31
 8001614:	4906      	ldr	r1, [pc, #24]	; (8001630 <__NVIC_EnableIRQ+0x34>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	2001      	movs	r0, #1
 800161e:	fa00 f202 	lsl.w	r2, r0, r2
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f7ff ff90 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff2d 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff42 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff90 	bl	8001688 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5f 	bl	8001634 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff35 	bl	80015fc <__NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffa2 	bl	80016ec <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b08b      	sub	sp, #44	; 0x2c
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c6:	e148      	b.n	8001a5a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017c8:	2201      	movs	r2, #1
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	f040 8137 	bne.w	8001a54 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4aa3      	ldr	r2, [pc, #652]	; (8001a78 <HAL_GPIO_Init+0x2c4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d05e      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 80017f0:	4aa1      	ldr	r2, [pc, #644]	; (8001a78 <HAL_GPIO_Init+0x2c4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d875      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 80017f6:	4aa1      	ldr	r2, [pc, #644]	; (8001a7c <HAL_GPIO_Init+0x2c8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d058      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 80017fc:	4a9f      	ldr	r2, [pc, #636]	; (8001a7c <HAL_GPIO_Init+0x2c8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d86f      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 8001802:	4a9f      	ldr	r2, [pc, #636]	; (8001a80 <HAL_GPIO_Init+0x2cc>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d052      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 8001808:	4a9d      	ldr	r2, [pc, #628]	; (8001a80 <HAL_GPIO_Init+0x2cc>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d869      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 800180e:	4a9d      	ldr	r2, [pc, #628]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d04c      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 8001814:	4a9b      	ldr	r2, [pc, #620]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d863      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 800181a:	4a9b      	ldr	r2, [pc, #620]	; (8001a88 <HAL_GPIO_Init+0x2d4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d046      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 8001820:	4a99      	ldr	r2, [pc, #612]	; (8001a88 <HAL_GPIO_Init+0x2d4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d85d      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 8001826:	2b12      	cmp	r3, #18
 8001828:	d82a      	bhi.n	8001880 <HAL_GPIO_Init+0xcc>
 800182a:	2b12      	cmp	r3, #18
 800182c:	d859      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 800182e:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <HAL_GPIO_Init+0x80>)
 8001830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001834:	080018af 	.word	0x080018af
 8001838:	08001889 	.word	0x08001889
 800183c:	0800189b 	.word	0x0800189b
 8001840:	080018dd 	.word	0x080018dd
 8001844:	080018e3 	.word	0x080018e3
 8001848:	080018e3 	.word	0x080018e3
 800184c:	080018e3 	.word	0x080018e3
 8001850:	080018e3 	.word	0x080018e3
 8001854:	080018e3 	.word	0x080018e3
 8001858:	080018e3 	.word	0x080018e3
 800185c:	080018e3 	.word	0x080018e3
 8001860:	080018e3 	.word	0x080018e3
 8001864:	080018e3 	.word	0x080018e3
 8001868:	080018e3 	.word	0x080018e3
 800186c:	080018e3 	.word	0x080018e3
 8001870:	080018e3 	.word	0x080018e3
 8001874:	080018e3 	.word	0x080018e3
 8001878:	08001891 	.word	0x08001891
 800187c:	080018a5 	.word	0x080018a5
 8001880:	4a82      	ldr	r2, [pc, #520]	; (8001a8c <HAL_GPIO_Init+0x2d8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001886:	e02c      	b.n	80018e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e029      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	3304      	adds	r3, #4
 8001896:	623b      	str	r3, [r7, #32]
          break;
 8001898:	e024      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	3308      	adds	r3, #8
 80018a0:	623b      	str	r3, [r7, #32]
          break;
 80018a2:	e01f      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	330c      	adds	r3, #12
 80018aa:	623b      	str	r3, [r7, #32]
          break;
 80018ac:	e01a      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018b6:	2304      	movs	r3, #4
 80018b8:	623b      	str	r3, [r7, #32]
          break;
 80018ba:	e013      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c4:	2308      	movs	r3, #8
 80018c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	611a      	str	r2, [r3, #16]
          break;
 80018ce:	e009      	b.n	80018e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d0:	2308      	movs	r3, #8
 80018d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	615a      	str	r2, [r3, #20]
          break;
 80018da:	e003      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
          break;
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          break;
 80018e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2bff      	cmp	r3, #255	; 0xff
 80018e8:	d801      	bhi.n	80018ee <HAL_GPIO_Init+0x13a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	e001      	b.n	80018f2 <HAL_GPIO_Init+0x13e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3304      	adds	r3, #4
 80018f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2bff      	cmp	r3, #255	; 0xff
 80018f8:	d802      	bhi.n	8001900 <HAL_GPIO_Init+0x14c>
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	e002      	b.n	8001906 <HAL_GPIO_Init+0x152>
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	3b08      	subs	r3, #8
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	210f      	movs	r1, #15
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	401a      	ands	r2, r3
 8001918:	6a39      	ldr	r1, [r7, #32]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8090 	beq.w	8001a54 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001934:	4b56      	ldr	r3, [pc, #344]	; (8001a90 <HAL_GPIO_Init+0x2dc>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a55      	ldr	r2, [pc, #340]	; (8001a90 <HAL_GPIO_Init+0x2dc>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_GPIO_Init+0x2dc>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800194c:	4a51      	ldr	r2, [pc, #324]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001958:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	220f      	movs	r2, #15
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a49      	ldr	r2, [pc, #292]	; (8001a98 <HAL_GPIO_Init+0x2e4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00d      	beq.n	8001994 <HAL_GPIO_Init+0x1e0>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a48      	ldr	r2, [pc, #288]	; (8001a9c <HAL_GPIO_Init+0x2e8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d007      	beq.n	8001990 <HAL_GPIO_Init+0x1dc>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a47      	ldr	r2, [pc, #284]	; (8001aa0 <HAL_GPIO_Init+0x2ec>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d101      	bne.n	800198c <HAL_GPIO_Init+0x1d8>
 8001988:	2302      	movs	r3, #2
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x1e2>
 800198c:	2303      	movs	r3, #3
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x1e2>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x1e2>
 8001994:	2300      	movs	r3, #0
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019a6:	493b      	ldr	r1, [pc, #236]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019c0:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	4937      	ldr	r1, [pc, #220]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	608b      	str	r3, [r1, #8]
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019ce:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	4933      	ldr	r1, [pc, #204]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 80019d8:	4013      	ands	r3, r2
 80019da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019e8:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	492d      	ldr	r1, [pc, #180]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	4929      	ldr	r1, [pc, #164]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d006      	beq.n	8001a1e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4923      	ldr	r1, [pc, #140]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a1e:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	491f      	ldr	r1, [pc, #124]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4919      	ldr	r1, [pc, #100]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	4915      	ldr	r1, [pc, #84]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	3301      	adds	r3, #1
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f47f aeaf 	bne.w	80017c8 <HAL_GPIO_Init+0x14>
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
 8001a6e:	372c      	adds	r7, #44	; 0x2c
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	10320000 	.word	0x10320000
 8001a7c:	10310000 	.word	0x10310000
 8001a80:	10220000 	.word	0x10220000
 8001a84:	10210000 	.word	0x10210000
 8001a88:	10120000 	.word	0x10120000
 8001a8c:	10110000 	.word	0x10110000
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010000 	.word	0x40010000
 8001a98:	40010800 	.word	0x40010800
 8001a9c:	40010c00 	.word	0x40010c00
 8001aa0:	40011000 	.word	0x40011000
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	e001      	b.n	8001aca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	807b      	strh	r3, [r7, #2]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae6:	787b      	ldrb	r3, [r7, #1]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aec:	887a      	ldrh	r2, [r7, #2]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001af2:	e003      	b.n	8001afc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001af4:	887b      	ldrh	r3, [r7, #2]
 8001af6:	041a      	lsls	r2, r3, #16
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	611a      	str	r2, [r3, #16]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b18:	887a      	ldrh	r2, [r7, #2]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	041a      	lsls	r2, r3, #16
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	400b      	ands	r3, r1
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	611a      	str	r2, [r3, #16]
}
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e26c      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8087 	beq.w	8001c66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b58:	4b92      	ldr	r3, [pc, #584]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d00c      	beq.n	8001b7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b64:	4b8f      	ldr	r3, [pc, #572]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d112      	bne.n	8001b96 <HAL_RCC_OscConfig+0x5e>
 8001b70:	4b8c      	ldr	r3, [pc, #560]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7c:	d10b      	bne.n	8001b96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7e:	4b89      	ldr	r3, [pc, #548]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d06c      	beq.n	8001c64 <HAL_RCC_OscConfig+0x12c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d168      	bne.n	8001c64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e246      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x76>
 8001ba0:	4b80      	ldr	r3, [pc, #512]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a7f      	ldr	r2, [pc, #508]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	e02e      	b.n	8001c0c <HAL_RCC_OscConfig+0xd4>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x98>
 8001bb6:	4b7b      	ldr	r3, [pc, #492]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a7a      	ldr	r2, [pc, #488]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b78      	ldr	r3, [pc, #480]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a77      	ldr	r2, [pc, #476]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e01d      	b.n	8001c0c <HAL_RCC_OscConfig+0xd4>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0xbc>
 8001bda:	4b72      	ldr	r3, [pc, #456]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a71      	ldr	r2, [pc, #452]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b6f      	ldr	r3, [pc, #444]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a6e      	ldr	r2, [pc, #440]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0xd4>
 8001bf4:	4b6b      	ldr	r3, [pc, #428]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a6a      	ldr	r2, [pc, #424]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b68      	ldr	r3, [pc, #416]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a67      	ldr	r2, [pc, #412]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fcb6 	bl	8001584 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fcb2 	bl	8001584 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e1fa      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0xe4>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fca2 	bl	8001584 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fc9e 	bl	8001584 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e1e6      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x10c>
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d063      	beq.n	8001d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c72:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c7e:	4b49      	ldr	r3, [pc, #292]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d11c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x18c>
 8001c8a:	4b46      	ldr	r3, [pc, #280]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d116      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_RCC_OscConfig+0x176>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e1ba      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cae:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4939      	ldr	r1, [pc, #228]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	e03a      	b.n	8001d3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ccc:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <HAL_RCC_OscConfig+0x270>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fc57 	bl	8001584 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cda:	f7ff fc53 	bl	8001584 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e19b      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4927      	ldr	r1, [pc, #156]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
 8001d0c:	e015      	b.n	8001d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <HAL_RCC_OscConfig+0x270>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff fc36 	bl	8001584 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fc32 	bl	8001584 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e17a      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d03a      	beq.n	8001dbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d019      	beq.n	8001d82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7ff fc16 	bl	8001584 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fc12 	bl	8001584 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e15a      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	f000 fa9a 	bl	80022b4 <RCC_Delay>
 8001d80:	e01c      	b.n	8001dbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d88:	f7ff fbfc 	bl	8001584 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8e:	e00f      	b.n	8001db0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff fbf8 	bl	8001584 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d908      	bls.n	8001db0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e140      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	42420000 	.word	0x42420000
 8001dac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db0:	4b9e      	ldr	r3, [pc, #632]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1e9      	bne.n	8001d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80a6 	beq.w	8001f16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dce:	4b97      	ldr	r3, [pc, #604]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10d      	bne.n	8001df6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	4b94      	ldr	r3, [pc, #592]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	4a93      	ldr	r2, [pc, #588]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	61d3      	str	r3, [r2, #28]
 8001de6:	4b91      	ldr	r3, [pc, #580]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df2:	2301      	movs	r3, #1
 8001df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df6:	4b8e      	ldr	r3, [pc, #568]	; (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d118      	bne.n	8001e34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e02:	4b8b      	ldr	r3, [pc, #556]	; (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a8a      	ldr	r2, [pc, #552]	; (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fbb9 	bl	8001584 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e16:	f7ff fbb5 	bl	8001584 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b64      	cmp	r3, #100	; 0x64
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0fd      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	4b81      	ldr	r3, [pc, #516]	; (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x312>
 8001e3c:	4b7b      	ldr	r3, [pc, #492]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a7a      	ldr	r2, [pc, #488]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	e02d      	b.n	8001ea6 <HAL_RCC_OscConfig+0x36e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x334>
 8001e52:	4b76      	ldr	r3, [pc, #472]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a75      	ldr	r2, [pc, #468]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	6213      	str	r3, [r2, #32]
 8001e5e:	4b73      	ldr	r3, [pc, #460]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4a72      	ldr	r2, [pc, #456]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	f023 0304 	bic.w	r3, r3, #4
 8001e68:	6213      	str	r3, [r2, #32]
 8001e6a:	e01c      	b.n	8001ea6 <HAL_RCC_OscConfig+0x36e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b05      	cmp	r3, #5
 8001e72:	d10c      	bne.n	8001e8e <HAL_RCC_OscConfig+0x356>
 8001e74:	4b6d      	ldr	r3, [pc, #436]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4a6c      	ldr	r2, [pc, #432]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	f043 0304 	orr.w	r3, r3, #4
 8001e7e:	6213      	str	r3, [r2, #32]
 8001e80:	4b6a      	ldr	r3, [pc, #424]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4a69      	ldr	r2, [pc, #420]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6213      	str	r3, [r2, #32]
 8001e8c:	e00b      	b.n	8001ea6 <HAL_RCC_OscConfig+0x36e>
 8001e8e:	4b67      	ldr	r3, [pc, #412]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a66      	ldr	r2, [pc, #408]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6213      	str	r3, [r2, #32]
 8001e9a:	4b64      	ldr	r3, [pc, #400]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a63      	ldr	r2, [pc, #396]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d015      	beq.n	8001eda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eae:	f7ff fb69 	bl	8001584 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7ff fb65 	bl	8001584 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e0ab      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ecc:	4b57      	ldr	r3, [pc, #348]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ee      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x37e>
 8001ed8:	e014      	b.n	8001f04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7ff fb53 	bl	8001584 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7ff fb4f 	bl	8001584 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e095      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef8:	4b4c      	ldr	r3, [pc, #304]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1ee      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d105      	bne.n	8001f16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0a:	4b48      	ldr	r3, [pc, #288]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a47      	ldr	r2, [pc, #284]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8081 	beq.w	8002022 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f20:	4b42      	ldr	r3, [pc, #264]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d061      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d146      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f34:	4b3f      	ldr	r3, [pc, #252]	; (8002034 <HAL_RCC_OscConfig+0x4fc>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7ff fb23 	bl	8001584 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f42:	f7ff fb1f 	bl	8001584 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e067      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f68:	d108      	bne.n	8001f7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f6a:	4b30      	ldr	r3, [pc, #192]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	492d      	ldr	r1, [pc, #180]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a19      	ldr	r1, [r3, #32]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	4927      	ldr	r1, [pc, #156]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f94:	4b27      	ldr	r3, [pc, #156]	; (8002034 <HAL_RCC_OscConfig+0x4fc>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff faf3 	bl	8001584 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7ff faef 	bl	8001584 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e037      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x46a>
 8001fc0:	e02f      	b.n	8002022 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_RCC_OscConfig+0x4fc>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fadc 	bl	8001584 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7ff fad8 	bl	8001584 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e020      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x498>
 8001fee:	e018      	b.n	8002022 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e013      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	429a      	cmp	r2, r3
 800200e:	d106      	bne.n	800201e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	40007000 	.word	0x40007000
 8002034:	42420060 	.word	0x42420060

08002038 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0d0      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800204c:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d910      	bls.n	800207c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 0207 	bic.w	r2, r3, #7
 8002062:	4965      	ldr	r1, [pc, #404]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0b8      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002094:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800209e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ac:	4b53      	ldr	r3, [pc, #332]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a52      	ldr	r2, [pc, #328]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b8:	4b50      	ldr	r3, [pc, #320]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	494d      	ldr	r1, [pc, #308]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d040      	beq.n	8002158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	4b47      	ldr	r3, [pc, #284]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d115      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e07f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e073      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002106:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e06b      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002116:	4b39      	ldr	r3, [pc, #228]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f023 0203 	bic.w	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4936      	ldr	r1, [pc, #216]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002128:	f7ff fa2c 	bl	8001584 <HAL_GetTick>
 800212c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	e00a      	b.n	8002146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002130:	f7ff fa28 	bl	8001584 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e053      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 020c 	and.w	r2, r3, #12
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	429a      	cmp	r2, r3
 8002156:	d1eb      	bne.n	8002130 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002158:	4b27      	ldr	r3, [pc, #156]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d210      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 0207 	bic.w	r2, r3, #7
 800216e:	4922      	ldr	r1, [pc, #136]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e032      	b.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4916      	ldr	r1, [pc, #88]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	490e      	ldr	r1, [pc, #56]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021c6:	f000 f821 	bl	800220c <HAL_RCC_GetSysClockFreq>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	490a      	ldr	r1, [pc, #40]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	5ccb      	ldrb	r3, [r1, r3]
 80021da:	fa22 f303 	lsr.w	r3, r2, r3
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1cc>)
 80021e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1d0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff f98a 	bl	8001500 <HAL_InitTick>

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40022000 	.word	0x40022000
 80021fc:	40021000 	.word	0x40021000
 8002200:	08002b24 	.word	0x08002b24
 8002204:	2000004c 	.word	0x2000004c
 8002208:	20000050 	.word	0x20000050

0800220c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002226:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b04      	cmp	r3, #4
 8002234:	d002      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x30>
 8002236:	2b08      	cmp	r3, #8
 8002238:	d003      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x36>
 800223a:	e027      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800223e:	613b      	str	r3, [r7, #16]
      break;
 8002240:	e027      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	0c9b      	lsrs	r3, r3, #18
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800224c:	5cd3      	ldrb	r3, [r2, r3]
 800224e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d010      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	0c5b      	lsrs	r3, r3, #17
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	4a11      	ldr	r2, [pc, #68]	; (80022ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800226e:	fb02 f203 	mul.w	r2, r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	fbb2 f3f3 	udiv	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	e004      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002280:	fb02 f303 	mul.w	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	613b      	str	r3, [r7, #16]
      break;
 800228a:	e002      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800228e:	613b      	str	r3, [r7, #16]
      break;
 8002290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002292:	693b      	ldr	r3, [r7, #16]
}
 8002294:	4618      	mov	r0, r3
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	007a1200 	.word	0x007a1200
 80022a8:	08002b34 	.word	0x08002b34
 80022ac:	08002b44 	.word	0x08002b44
 80022b0:	003d0900 	.word	0x003d0900

080022b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <RCC_Delay+0x34>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <RCC_Delay+0x38>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	0a5b      	lsrs	r3, r3, #9
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022d0:	bf00      	nop
  }
  while (Delay --);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	60fa      	str	r2, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f9      	bne.n	80022d0 <RCC_Delay+0x1c>
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	2000004c 	.word	0x2000004c
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e041      	b.n	8002386 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff f85a 	bl	80013d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3304      	adds	r3, #4
 800232c:	4619      	mov	r1, r3
 800232e:	4610      	mov	r0, r2
 8002330:	f000 fa56 	bl	80027e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d001      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e035      	b.n	8002414 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <HAL_TIM_Base_Start_IT+0x90>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d009      	beq.n	80023de <HAL_TIM_Base_Start_IT+0x4e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d2:	d004      	beq.n	80023de <HAL_TIM_Base_Start_IT+0x4e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a12      	ldr	r2, [pc, #72]	; (8002424 <HAL_TIM_Base_Start_IT+0x94>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d111      	bne.n	8002402 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b06      	cmp	r3, #6
 80023ee:	d010      	beq.n	8002412 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002400:	e007      	b.n	8002412 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40012c00 	.word	0x40012c00
 8002424:	40000400 	.word	0x40000400

08002428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d020      	beq.n	800248c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01b      	beq.n	800248c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0202 	mvn.w	r2, #2
 800245c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f998 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 8002478:	e005      	b.n	8002486 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f98b 	bl	8002796 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f99a 	bl	80027ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d020      	beq.n	80024d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01b      	beq.n	80024d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0204 	mvn.w	r2, #4
 80024a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2202      	movs	r2, #2
 80024ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f972 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f965 	bl	8002796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f974 	bl	80027ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d020      	beq.n	8002524 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01b      	beq.n	8002524 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0208 	mvn.w	r2, #8
 80024f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2204      	movs	r2, #4
 80024fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f94c 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 8002510:	e005      	b.n	800251e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f93f 	bl	8002796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f94e 	bl	80027ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	d020      	beq.n	8002570 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01b      	beq.n	8002570 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0210 	mvn.w	r2, #16
 8002540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2208      	movs	r2, #8
 8002546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f926 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 800255c:	e005      	b.n	800256a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f919 	bl	8002796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f928 	bl	80027ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00c      	beq.n	8002594 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d007      	beq.n	8002594 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0201 	mvn.w	r2, #1
 800258c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe fde0 	bl	8001154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00c      	beq.n	80025b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fa6f 	bl	8002a96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00c      	beq.n	80025dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f8f8 	bl	80027cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00c      	beq.n	8002600 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0220 	mvn.w	r2, #32
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fa42 	bl	8002a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_TIM_ConfigClockSource+0x1c>
 8002620:	2302      	movs	r3, #2
 8002622:	e0b4      	b.n	800278e <HAL_TIM_ConfigClockSource+0x186>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800264a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265c:	d03e      	beq.n	80026dc <HAL_TIM_ConfigClockSource+0xd4>
 800265e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002662:	f200 8087 	bhi.w	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 8002666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266a:	f000 8086 	beq.w	800277a <HAL_TIM_ConfigClockSource+0x172>
 800266e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002672:	d87f      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 8002674:	2b70      	cmp	r3, #112	; 0x70
 8002676:	d01a      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0xa6>
 8002678:	2b70      	cmp	r3, #112	; 0x70
 800267a:	d87b      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 800267c:	2b60      	cmp	r3, #96	; 0x60
 800267e:	d050      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x11a>
 8002680:	2b60      	cmp	r3, #96	; 0x60
 8002682:	d877      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 8002684:	2b50      	cmp	r3, #80	; 0x50
 8002686:	d03c      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0xfa>
 8002688:	2b50      	cmp	r3, #80	; 0x50
 800268a:	d873      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	d058      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x13a>
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	d86f      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 8002694:	2b30      	cmp	r3, #48	; 0x30
 8002696:	d064      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x15a>
 8002698:	2b30      	cmp	r3, #48	; 0x30
 800269a:	d86b      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 800269c:	2b20      	cmp	r3, #32
 800269e:	d060      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x15a>
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d867      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d05c      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x15a>
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d05a      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x15a>
 80026ac:	e062      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6899      	ldr	r1, [r3, #8]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f000 f96a 	bl	8002996 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	609a      	str	r2, [r3, #8]
      break;
 80026da:	e04f      	b.n	800277c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6899      	ldr	r1, [r3, #8]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f000 f953 	bl	8002996 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026fe:	609a      	str	r2, [r3, #8]
      break;
 8002700:	e03c      	b.n	800277c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6859      	ldr	r1, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	461a      	mov	r2, r3
 8002710:	f000 f8ca 	bl	80028a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2150      	movs	r1, #80	; 0x50
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f921 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 8002720:	e02c      	b.n	800277c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	461a      	mov	r2, r3
 8002730:	f000 f8e8 	bl	8002904 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2160      	movs	r1, #96	; 0x60
 800273a:	4618      	mov	r0, r3
 800273c:	f000 f911 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 8002740:	e01c      	b.n	800277c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	461a      	mov	r2, r3
 8002750:	f000 f8aa 	bl	80028a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2140      	movs	r1, #64	; 0x40
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f901 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 8002760:	e00c      	b.n	800277c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4619      	mov	r1, r3
 800276c:	4610      	mov	r0, r2
 800276e:	f000 f8f8 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 8002772:	e003      	b.n	800277c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
      break;
 8002778:	e000      	b.n	800277c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800277a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800278c:	7bfb      	ldrb	r3, [r7, #15]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
	...

080027e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a2b      	ldr	r2, [pc, #172]	; (80028a0 <TIM_Base_SetConfig+0xc0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d007      	beq.n	8002808 <TIM_Base_SetConfig+0x28>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fe:	d003      	beq.n	8002808 <TIM_Base_SetConfig+0x28>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a28      	ldr	r2, [pc, #160]	; (80028a4 <TIM_Base_SetConfig+0xc4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d108      	bne.n	800281a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a20      	ldr	r2, [pc, #128]	; (80028a0 <TIM_Base_SetConfig+0xc0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <TIM_Base_SetConfig+0x52>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002828:	d003      	beq.n	8002832 <TIM_Base_SetConfig+0x52>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <TIM_Base_SetConfig+0xc4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d108      	bne.n	8002844 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <TIM_Base_SetConfig+0xc0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d103      	bne.n	8002878 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f023 0201 	bic.w	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	611a      	str	r2, [r3, #16]
  }
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40000400 	.word	0x40000400

080028a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f023 0201 	bic.w	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 030a 	bic.w	r3, r3, #10
 80028e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	621a      	str	r2, [r3, #32]
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	f023 0210 	bic.w	r2, r3, #16
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800292e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	031b      	lsls	r3, r3, #12
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002940:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	621a      	str	r2, [r3, #32]
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	f043 0307 	orr.w	r3, r3, #7
 8002984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002996:	b480      	push	{r7}
 8002998:	b087      	sub	sp, #28
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	021a      	lsls	r2, r3, #8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4313      	orrs	r3, r2
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	609a      	str	r2, [r3, #8]
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e041      	b.n	8002a70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d009      	beq.n	8002a44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a38:	d004      	beq.n	8002a44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d10c      	bne.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40012c00 	.word	0x40012c00
 8002a80:	40000400 	.word	0x40000400

08002a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <__libc_init_array>:
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	2600      	movs	r6, #0
 8002aac:	4d0c      	ldr	r5, [pc, #48]	; (8002ae0 <__libc_init_array+0x38>)
 8002aae:	4c0d      	ldr	r4, [pc, #52]	; (8002ae4 <__libc_init_array+0x3c>)
 8002ab0:	1b64      	subs	r4, r4, r5
 8002ab2:	10a4      	asrs	r4, r4, #2
 8002ab4:	42a6      	cmp	r6, r4
 8002ab6:	d109      	bne.n	8002acc <__libc_init_array+0x24>
 8002ab8:	f000 f822 	bl	8002b00 <_init>
 8002abc:	2600      	movs	r6, #0
 8002abe:	4d0a      	ldr	r5, [pc, #40]	; (8002ae8 <__libc_init_array+0x40>)
 8002ac0:	4c0a      	ldr	r4, [pc, #40]	; (8002aec <__libc_init_array+0x44>)
 8002ac2:	1b64      	subs	r4, r4, r5
 8002ac4:	10a4      	asrs	r4, r4, #2
 8002ac6:	42a6      	cmp	r6, r4
 8002ac8:	d105      	bne.n	8002ad6 <__libc_init_array+0x2e>
 8002aca:	bd70      	pop	{r4, r5, r6, pc}
 8002acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad0:	4798      	blx	r3
 8002ad2:	3601      	adds	r6, #1
 8002ad4:	e7ee      	b.n	8002ab4 <__libc_init_array+0xc>
 8002ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ada:	4798      	blx	r3
 8002adc:	3601      	adds	r6, #1
 8002ade:	e7f2      	b.n	8002ac6 <__libc_init_array+0x1e>
 8002ae0:	08002b48 	.word	0x08002b48
 8002ae4:	08002b48 	.word	0x08002b48
 8002ae8:	08002b48 	.word	0x08002b48
 8002aec:	08002b4c 	.word	0x08002b4c

08002af0 <memset>:
 8002af0:	4603      	mov	r3, r0
 8002af2:	4402      	add	r2, r0
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d100      	bne.n	8002afa <memset+0xa>
 8002af8:	4770      	bx	lr
 8002afa:	f803 1b01 	strb.w	r1, [r3], #1
 8002afe:	e7f9      	b.n	8002af4 <memset+0x4>

08002b00 <_init>:
 8002b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b02:	bf00      	nop
 8002b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b06:	bc08      	pop	{r3}
 8002b08:	469e      	mov	lr, r3
 8002b0a:	4770      	bx	lr

08002b0c <_fini>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	bf00      	nop
 8002b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	469e      	mov	lr, r3
 8002b16:	4770      	bx	lr
